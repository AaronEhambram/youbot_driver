class YouBotManipulator
!!!425841.cpp!!!	YouBotManipulator(in name : string, in configFilePath : string = "../config/")

  string filename;
  filename = name;
  filename.append(".cfg");

  this->configFilePath = configFilePath;
  this->ethercatConfigFileName = "youbot-ethercat.cfg";

  configfile == NULL;
  configfile = new ConfigFile(filename, configFilePath);

  this->initializeJoints();

!!!425969.cpp!!!	~YouBotManipulator()
  if(configfile != NULL)
    delete configfile;
!!!325617.cpp!!!	getArmJoint(in armJointNumber : uint) : YouBotJoint&

    if (armJointNumber <= 0 || armJointNumber > ARMJOINTS) {
      throw std::out_of_range("Invalid Joint Number");
    }
    return joints[armJointNumber - 1];
!!!391665.cpp!!!	getArmGripper() : YouBotGripper&
    if (this->gripperVector.size() >= 1) {
      return this->gripperVector[0];
    } else {
      throw std::out_of_range("There is no Gripper");
    }
!!!589297.cpp!!!	setJointData(in JointData : std::vector<JointAngleSetpoint>) : void
    if (JointData.size() != ARMJOINTS)
      throw std::out_of_range("Wrong number of JointAngleSetpoints");

    EthercatMaster::getInstance().AutomaticSendOn(false);
    joints[0].setData(JointData[0], NON_BLOCKING);
    joints[1].setData(JointData[1], NON_BLOCKING);
    joints[2].setData(JointData[2], NON_BLOCKING);
    joints[3].setData(JointData[3], NON_BLOCKING);
    joints[4].setData(JointData[4], NON_BLOCKING);
    EthercatMaster::getInstance().AutomaticSendOn(true);

!!!589425.cpp!!!	getJointData(out data : std::vector<JointSensedAngle>) : void
    data.resize(ARMJOINTS);
    EthercatMaster::getInstance().AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    joints[4].getData(data[4]);
    EthercatMaster::getInstance().AutomaticReceiveOn(true);
!!!589553.cpp!!!	setJointData(in JointData : std::vector<JointVelocitySetpoint>) : void
    if (JointData.size() != ARMJOINTS)
      throw std::out_of_range("Wrong number of JointVelocitySetpoints");

    EthercatMaster::getInstance().AutomaticSendOn(false);
    joints[0].setData(JointData[0], NON_BLOCKING);
    joints[1].setData(JointData[1], NON_BLOCKING);
    joints[2].setData(JointData[2], NON_BLOCKING);
    joints[3].setData(JointData[3], NON_BLOCKING);
    joints[4].setData(JointData[4], NON_BLOCKING);
    EthercatMaster::getInstance().AutomaticSendOn(true);
!!!589681.cpp!!!	getJointData(out data : std::vector<JointSensedVelocity>) : void
    data.resize(ARMJOINTS);
    EthercatMaster::getInstance().AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    joints[4].getData(data[4]);
    EthercatMaster::getInstance().AutomaticReceiveOn(true);
!!!589809.cpp!!!	getJointData(out data : std::vector<JointSensedTemperature>) : void
    data.resize(ARMJOINTS);
    EthercatMaster::getInstance().AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    joints[4].getData(data[4]);
    EthercatMaster::getInstance().AutomaticReceiveOn(true);
!!!589937.cpp!!!	getJointData(out data : std::vector<JointSensedCurrent>) : void
    data.resize(ARMJOINTS);
    EthercatMaster::getInstance().AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    joints[4].getData(data[4]);
    EthercatMaster::getInstance().AutomaticReceiveOn(true);
!!!426097.cpp!!!	initializeJoints() : void

    LOG(info) << "Initializing Joints";


    //get number of slaves
    unsigned int noSlaves = EthercatMaster::getInstance(this->ethercatConfigFileName, this->configFilePath).getNumberOfSlaves();


    if(noSlaves < ARMJOINTS){
      throw std::runtime_error("Not enough ethercat slaves were found to create a YouBotManipulator!");
    }

   // configfile.setSection("JointTopology");

    unsigned int slaveNumber = 0;
    configfile->readInto(slaveNumber, "JointTopology", "ManipulatorJoint1");
    if(slaveNumber  <= noSlaves){
      joints.push_back(YouBotJoint(slaveNumber));
    }else{
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber, "JointTopology", "ManipulatorJoint2");
    if(slaveNumber  <= noSlaves){
      joints.push_back(YouBotJoint(slaveNumber));
    }else{
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber,"JointTopology", "ManipulatorJoint3");
    if(slaveNumber  <= noSlaves){
      joints.push_back(YouBotJoint(slaveNumber));
    }else{
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber,"JointTopology", "ManipulatorJoint4");
    if(slaveNumber  <= noSlaves){
      joints.push_back(YouBotJoint(slaveNumber));
    }else{
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber,"JointTopology", "ManipulatorJoint5");
    if(slaveNumber  <= noSlaves){
      joints.push_back(YouBotJoint(slaveNumber));
    }else{
      throw std::out_of_range("The ethercat slave number is not available!");
    }



    

    //Configure Joint Parameters
    std::string jointName;
    JointName jName;
    GearRatio gearRatio;
    EncoderTicksPerRound ticksPerRound;
    InverseMovementDirection inverseDir;
    double gearRatio_numerator = 0;
    double gearRatio_denominator = 1;
    MotorContollerGearRatio contollerGearRatio;
    contollerGearRatio.setParameter(0);


    for (unsigned int i = 0; i < ARMJOINTS; i++) {
      std::stringstream jointNameStream;
      jointNameStream << "Joint_" << i + 1;
      jointName = jointNameStream.str();

      //check if the motor contoller gear ratio is one.
      //The gear ratio will be taken in to acount by the driver
      joints[i].getConfigurationParameter(contollerGearRatio);
      unsigned int cGearRatio;
      contollerGearRatio.getParameter(cGearRatio);
      if(cGearRatio != 1){
        throw std::runtime_error("The Motor Contoller Gear Ratio of " + jointName + " is not set to 1.");
      }


      string name;
      configfile->readInto(name, jointName, "JointName");
      jName.setParameter(name);
      configfile->readInto(gearRatio_numerator, jointName, "GearRatio_numerator");
      configfile->readInto(gearRatio_denominator, jointName, "GearRatio_denominator");
      gearRatio.setParameter(gearRatio_numerator / gearRatio_denominator);
      int ticks;
      configfile->readInto(ticks, jointName, "EncoderTicksPerRound");
      ticksPerRound.setParameter(ticks);
      bool invdir = false;
      configfile->readInto(invdir, jointName, "InverseMovementDirection");
      inverseDir.setParameter(invdir);

      joints[i].setConfigurationParameter(jName);
      joints[i].setConfigurationParameter(gearRatio);
      joints[i].setConfigurationParameter(ticksPerRound);
      joints[i].setConfigurationParameter(inverseDir);
    }


    //TODO When to calibrate the manipulator and when it is not necessary
    //Calibrate all manipulator joints
    std::vector<CalibrateJoint> calibrateJointVec;
    quantity<si::current> current;
    JointLimits jLimits;
    double dummy = 0;
    bool doCalibration = true;

    for (unsigned int i = 0; i < ARMJOINTS; i++) {

      std::stringstream jointNameStream;
      jointNameStream << "Joint_" << i + 1;
      jointName = jointNameStream.str();
 //     configfile.setSection(jointName.c_str());

      configfile->readInto(doCalibration, jointName, "DoCalibration");

      int upperlimit = 0, lowerlimit = 0;
      configfile->readInto(lowerlimit, jointName, "LowerLimit_[encoderTicks]");
      configfile->readInto(upperlimit, jointName, "UpperLimit_[encoderTicks]");

      jLimits.setParameter(lowerlimit, upperlimit, true);
      joints[i].setConfigurationParameter(jLimits);
      
      configfile->readInto(dummy, jointName, "CalibrationMaxCurrent_[ampere]");
      current = dummy * ampere;
      std::string direction;
      configfile->readInto(direction, jointName, "CalibrationDirection");

      calibrateJointVec.push_back(CalibrateJoint());

      if (direction == "POSITIV") {
        calibrateJointVec[i].setParameter(doCalibration, POSITIV, current);
      } else if (direction == "NEGATIV") {
        calibrateJointVec[i].setParameter(doCalibration, NEGATIV, current);
      } else {
        throw std::runtime_error("Wrong calibration direction for " + jointName);
      }
      joints[i].setConfigurationParameter(calibrateJointVec[i]);
    }



    //Initializing Gripper
   // configfile.setSection("JointTopology");
    configfile->readInto(slaveNumber, "JointTopology", "ManipulatorJoint5");
    this->gripperVector.push_back(YouBotGripper(slaveNumber));
    BarSpacingOffset barOffest;
    MaxTravelDistance maxDistance;
    MaxEncoderValue maxEncoder;

 //   configfile.setSection("Gripper");
    configfile->readInto(doCalibration, "Gripper", "DoCalibration");
    configfile->readInto(dummy, "Gripper", "BarSpacingOffset_[meter]");
    barOffest.setParameter(dummy * meter);
    gripperVector[0].setConfigurationParameter(barOffest);
    configfile->readInto(dummy, "Gripper", "MaxTravelDistance_[meter]");
    maxDistance.setParameter(dummy * meter);
    gripperVector[0].setConfigurationParameter(maxDistance);
    int maxenc = 0;
    configfile->readInto(maxenc, "Gripper", "MaxEncoderValue");
    maxEncoder.setParameter(maxenc);
    gripperVector[0].setConfigurationParameter(maxEncoder);

    // Calibrating Gripper
    CalibrateGripper calibrate;
    calibrate.setParameter(doCalibration);
    gripperVector[0].setConfigurationParameter(calibrate);

    return;
