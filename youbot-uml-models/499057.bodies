class JointTrajectoryController
!!!958705.cpp!!!	JointTrajectoryController()
    this->ISum = 0;
    this->DDiff = 0;
    this->PParameter = 10.0;
    this->IParameter = 1;
    this->DParameter = 0;
    this->last_pose_diff = 0;
!!!958961.cpp!!!	setTrajectoryPositions(in targetPositions : std::list<int32>) : void

    if (trajectoryPositionsBuffer1InUse == false) {
      {
        boost::mutex::scoped_lock dataMutex1(trajectoryPositionsBuffer1Mutex);
        this->trajectoryPositionsBuffer1 = targetPositions;

      }
    } else if (trajectoryPositionsBuffer2InUse == false) {
      {
        boost::mutex::scoped_lock dataMutex2(trajectoryPositionsBuffer2Mutex);
        this->trajectoryPositionsBuffer2 = targetPositions;
      }

    } else {
      LOG(error) << "Could not set the Trajectory!";
    }
!!!959089.cpp!!!	updateTrajectoryController(in actual : SlaveMessageInput, out velocity : SlaveMessageOutput) : bool
  int32 targetPosition;
    {
      boost::mutex::scoped_lock dataMutex2(trajectoryPositionsBuffer2Mutex);
      {
      boost::mutex::scoped_lock dataMutex2(trajectoryPositionsBuffer1Mutex);

      if (!trajectoryPositionsBuffer1.empty() && !trajectoryPositionsBuffer1InUse && !trajectoryPositionsBuffer2InUse) {
        trajectoryPositionsBuffer1InUse = true;
      }

      if (!trajectoryPositionsBuffer1.empty() && trajectoryPositionsBuffer1InUse) {
        targetPosition = (trajectoryPositionsBuffer1).front();
        (trajectoryPositionsBuffer1).pop_front();
      } else {
        trajectoryPositionsBuffer1InUse = false;
      }
      
      if (!trajectoryPositionsBuffer2.empty() && !trajectoryPositionsBuffer1InUse && !trajectoryPositionsBuffer2InUse) {
        trajectoryPositionsBuffer2InUse = true;
      }

      if (!trajectoryPositionsBuffer2.empty() && trajectoryPositionsBuffer2InUse) {
        targetPosition = (trajectoryPositionsBuffer2).front();
        (trajectoryPositionsBuffer2).pop_front();
      } else {
        trajectoryPositionsBuffer2InUse = false;
      }
    }
    }
    
    if(!trajectoryPositionsBuffer1InUse && !trajectoryPositionsBuffer2InUse){
      return false;
    }
      
   
  ///////////////////////// Controller
  
    int32 pose_diff;
    pose_diff =  targetPosition - actual.actualPosition;
    int32 pose_diff_clipping = 65535;
    if(pose_diff > pose_diff_clipping)
      pose_diff = pose_diff_clipping;
    
    if(pose_diff < -pose_diff_clipping)
      pose_diff = -pose_diff_clipping;
    
    double ISum_clipping = 1000;
    this->ISum = this->ISum + pose_diff;
    
    
    if(ISum > ISum_clipping)
      ISum = ISum_clipping;
    
    if(ISum < -ISum_clipping)
      ISum = -ISum_clipping;
      
      
    this->DDiff = this->last_pose_diff - pose_diff;
    velocity.value = ((this->PParameter/256.0) * pose_diff) + ((this->IParameter/65536.0)* this->ISum) + ((this->DParameter/256.0) * this->DDiff);
    this->last_pose_diff =  pose_diff;
    
    velocity.controllerMode = VELOCITY_CONTROL;
  //  printf("pose_target: %10d  pose_diff: %10d   velout: %10d\n",targetPosition, pose_diff, velocity.value);
    
    return true;
