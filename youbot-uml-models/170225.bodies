class YouBotJoint
!!!266993.cpp!!!	YouBotJoint(in jointNo : uint, in configFilePath : std::string = "../config/")
    this->jointNumber = jointNo;
    timeTillNextMailboxUpdate = 1; //ms
    mailboxMsgRetries = 100;
    this->storage.inverseMovementDirection = false;
    this->storage.lowerLimit = 0;
    this->storage.upperLimit = 0;
    this->storage.areLimitsActive = false;
    std::stringstream jointNameStream;
    jointNameStream << "Joint " << this->jointNumber << " ";
    jointNameString = jointNameStream.str();
    ethercatMaster = &(EthercatMaster::getInstance("youbot-ethercat.cfg", configFilePath));
    
!!!475761.cpp!!!	setConfigurationParameter(in parameter : JointParameter) : void
  throw std::runtime_error("Please use YouBotJointParameters");
!!!380529.cpp!!!	getConfigurationParameter(out parameter : JointParameter) : void
  throw std::runtime_error("Please use YouBotJointParameters");
!!!466929.cpp!!!	getConfigurationParameter(out parameter : YouBotJointParameterReadOnly) : void

    if (parameter.getType() == MOTOR_CONTOLLER_PARAMETER) {

      YouBotSlaveMailboxMsg message;
      parameter.getYouBotMailboxMsg(message, GAP, storage);

      message.parameterName = parameter.getName();
      if (retrieveValueFromMotorContoller(message)) {
        parameter.setYouBotMailboxMsg(message, storage);
      } else {
        throw JointParameterException("Unable to get parameter: " + parameter.getName() + " from joint: " + this->jointName);
      }
    }else{
      throw JointParameterException("Parameter " + parameter.getName() + " is not a motor controller parameter of a joint");
    }
!!!376049.cpp!!!	getConfigurationParameter(out parameter : YouBotJointParameter) : void
    if (parameter.getType() == MOTOR_CONTOLLER_PARAMETER) {

      YouBotSlaveMailboxMsg message;
      parameter.getYouBotMailboxMsg(message, GAP, storage);

      message.parameterName = parameter.getName();
      if (retrieveValueFromMotorContoller(message)) {
        parameter.setYouBotMailboxMsg(message, storage);
      } else {
        throw JointParameterException("Unable to get parameter: " + parameter.getName() + " from joint: " + this->jointName);
      }
    }else{
      throw JointParameterException("Parameter " + parameter.getName() + " is not a motor controller parameter of a joint");
    }
!!!375921.cpp!!!	setConfigurationParameter(in parameter : YouBotJointParameter) : void
    if (parameter.getType() == MOTOR_CONTOLLER_PARAMETER) {

      YouBotSlaveMailboxMsg message;
      parameter.getYouBotMailboxMsg(message, SAP, storage);

      message.parameterName = parameter.getName();
      if (!setValueToMotorContoller(message)) {
        throw JointParameterException("Unable to set parameter: " + parameter.getName() + " to joint: " + this->jointName);
      }
    }else{
      throw JointParameterException("Parameter " + parameter.getName() + " is not a motor controller parameter of a joint");
    }
!!!475377.cpp!!!	getConfigurationParameter(out parameter : JointName) : void
    parameter.value = this->jointName;
!!!380401.cpp!!!	setConfigurationParameter(in parameter : JointName) : void
    this->jointName = parameter.value;
!!!475505.cpp!!!	getConfigurationParameter(out parameter : GearRatio) : void
    parameter.setParameter(this->storage.gearRatio);
!!!475121.cpp!!!	setConfigurationParameter(in parameter : GearRatio) : void
    if (parameter.value == 0) {
      throw std::out_of_range("A Gear Ratio of zero is not allowed");
    }
    this->storage.gearRatio = parameter.value;
!!!475633.cpp!!!	getConfigurationParameter(out parameter : EncoderTicksPerRound) : void
    parameter.setParameter(this->storage.encoderTicksPerRound);
!!!475249.cpp!!!	setConfigurationParameter(in parameter : EncoderTicksPerRound) : void
    if (parameter.value == 0) {
      throw std::out_of_range("Zero Encoder Ticks per Round are not allowed");
    }
    this->storage.encoderTicksPerRound = parameter.value;
!!!402417.cpp!!!	setConfigurationParameter(in parameter : CalibrateJoint) : void
    if (parameter.doCalibration) {
      LOG(info) << "Calibrate Joint: " << this->jointName;

      int calibrationVel = 0; //rpm
      //YouBotSlaveMsg messageBuffer;
      messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
      if (parameter.calibrationDirection == POSITIV) {
        calibrationVel = 1.0 / storage.gearRatio;
      } else if (parameter.calibrationDirection == NEGATIV) {
        calibrationVel = -1.0 / storage.gearRatio;
      } else {
        throw std::runtime_error("No calibration direction for joint: " + this->jointName);
      }

      if (this->storage.inverseMovementDirection == true) {
        calibrationVel *= -1;
      }

      JointSensedCurrent sensedCurrent;

      messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
      messageBuffer.stctOutput.value = calibrationVel;
      ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);

      sensedCurrent.current = 0;
      //turn till a max current is reached
      while (abs(sensedCurrent.current) < abs(parameter.maxCurrent)) {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        this->getData(sensedCurrent);
      }

      //stop movement
      messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
      messageBuffer.stctOutput.value = 0;
      //   LOG(trace) << "vel [rpm] " << messageBuffer.stctOutput.value << " rad_sec " << data.angularVelocity;
      ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);

      //set encoder reference position
      SLEEP_MILLISEC(500);
      messageBuffer.stctOutput.controllerMode = SET_POSITION_TO_REFERENCE;
      messageBuffer.stctOutput.value = 0;
      ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);

      //switch to position controll
      SLEEP_MILLISEC(100);
      messageBuffer.stctOutput.controllerMode = POSITION_CONTROL;
      messageBuffer.stctOutput.value = 0;
      //   LOG(trace) << "vel [rpm] " << messageBuffer.stctOutput.value << " rad_sec " << data.angularVelocity;
      ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);

      //     LOG(info) << "Calibration finished for joint: " << this->jointName;
    }

!!!402673.cpp!!!	setConfigurationParameter(in parameter : InverseMovementDirection) : void
    this->storage.inverseMovementDirection = parameter.value;
!!!824945.cpp!!!	getConfigurationParameter(out parameter : InverseMovementDirection) : void
    parameter.setParameter(this->storage.inverseMovementDirection);
!!!869233.cpp!!!	setConfigurationParameter(in parameter : JointLimits) : void

    this->storage.lowerLimit = parameter.lowerLimit;
    this->storage.upperLimit = parameter.upperLimit;
    this->storage.areLimitsActive = parameter.areLimitsActive;
    ethercatMaster->setJointLimits(parameter.lowerLimit, parameter.upperLimit, storage.inverseMovementDirection, parameter.areLimitsActive, this->jointNumber);

!!!824817.cpp!!!	getConfigurationParameter(out parameter : JointLimits) : void
    parameter.setParameter(this->storage.lowerLimit, this->storage.upperLimit, this->storage.areLimitsActive);
!!!869361.cpp!!!	getConfigurationParameter(out parameter : JointLimitsRadian) : void
    quantity<plane_angle> lowlimit = ((double) this->storage.lowerLimit / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
    quantity<plane_angle> uplimit = ((double) this->storage.upperLimit / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
    parameter.setParameter(lowlimit, uplimit, this->storage.areLimitsActive);
!!!619505.cpp!!!	setConfigurationParameter(in parameter : InitializeJoint) : void
    if (parameter.value) {
      //YouBotSlaveMsg messageBuffer;
      messageBuffer.stctOutput.controllerMode = INITIALIZE;
      messageBuffer.stctOutput.value = 0;

      ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
    }
!!!633457.cpp!!!	getConfigurationParameter(out parameter : FirmwareVersion) : void

    YouBotSlaveMailboxMsg message;
    parameter.getYouBotMailboxMsg(message, GAP, storage);

    bool unvalid = true;
    unsigned int retry = 0;

    ethercatMaster->setMailboxMsgBuffer(message, this->jointNumber);

    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {
      if( ethercatMaster->getMailboxMsgBuffer(message, this->jointNumber) ) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      this->parseMailboxStatusFlags(message);
      throw std::runtime_error("Unable to get firmware version for joint: " + this->jointName);
      return;
    } 
    
    char versionString[8] = {0};
    versionString[0] = message.stctInput.replyAddress;
    versionString[1] = message.stctInput.moduleAddress;
    versionString[2] = message.stctInput.status;
    versionString[3] = message.stctInput.commandNumber;
    versionString[4] = message.stctInput.value >> 24;
    versionString[5] = message.stctInput.value >> 16;
    versionString[6] = message.stctInput.value >> 8;
    versionString[7] = message.stctInput.value & 0xff;
    
    int controllerType = 0;
    float firmwareVersion = 0;
    sscanf (versionString,"%dV%f",&controllerType,&firmwareVersion);
    
    parameter.setParameter(controllerType, firmwareVersion);

    return;
!!!695665.cpp!!!	setConfigurationParameter(in parameter : YouBotSlaveMailboxMsg) : void
   if (!setValueToMotorContoller(parameter)) {
     throw JointParameterException("Unable to set parameter at joint: " + this->jointName);
   }
!!!695793.cpp!!!	getConfigurationParameter(out parameter : YouBotSlaveMailboxMsg) : void
   if (!retrieveValueFromMotorContoller(parameter)) {
     throw JointParameterException("Unable to get parameter from joint: " + this->jointName);
   }
   this->parseMailboxStatusFlags(parameter);
!!!890225.cpp!!!	getConfigurationParameter(out parameter : TorqueConstant) : void
   parameter.setParameter(this->storage.torqueConstant);
!!!815473.cpp!!!	setConfigurationParameter(in parameter : TorqueConstant) : void
   parameter.getParameter(this->storage.torqueConstant);
!!!596465.cpp!!!	storeConfigurationParameterPermanent(in parameter : YouBotJointParameter) : void
    if (parameter.getType() == MOTOR_CONTOLLER_PARAMETER) {

      this->setConfigurationParameter(parameter);

      YouBotSlaveMailboxMsg message;
      parameter.getYouBotMailboxMsg(message, STAP, storage);

      if (!setValueToMotorContoller(message)) {
        throw JointParameterException("Unable to store parameter: " + parameter.getName() + " to joint: " + this->jointName);
      }
    }else{
      throw JointParameterException("Parameter " + parameter.getName() + " is not a motor controller parameter of a joint");
    }
!!!596593.cpp!!!	restoreConfigurationParameter(out parameter : YouBotJointParameter) : void
    if (parameter.getType() == MOTOR_CONTOLLER_PARAMETER) {

      YouBotSlaveMailboxMsg message;
      parameter.getYouBotMailboxMsg(message, RSAP, storage);

      if (!setValueToMotorContoller(message)) {
        throw JointParameterException("Unable to restore parameter: " + parameter.getName() + " at joint: " + this->jointName);
      }

      this->getConfigurationParameter(parameter);
    }else{
      throw JointParameterException("Parameter " + parameter.getName() + " is not a motor controller parameter of a joint");
    }
!!!267249.cpp!!!	setData(in data : JointDataSetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void
    LOG(info) << "Nothing to do";
!!!267377.cpp!!!	getData(out data : JointData) : void
    LOG(info) << "Nothing to do";
!!!246257.cpp!!!	setData(in data : JointAngleSetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void

    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);
    
    if (storage.gearRatio == 0) {
      throw std::out_of_range("A Gear Ratio of zero is not allowed");
    }
    
    if (storage.encoderTicksPerRound == 0) {
      throw std::out_of_range("Zero Encoder Ticks per Round are not allowed");
    }

    if(storage.areLimitsActive){

      quantity<plane_angle> lowLimit = ((double) this->storage.lowerLimit / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
      quantity<plane_angle> upLimit = ((double) this->storage.upperLimit / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
      
      if (storage.inverseMovementDirection) {
        upLimit = ((double) -(this->storage.lowerLimit) / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
        lowLimit = ((double) -(this->storage.upperLimit) / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
      }
      

      if (!((data.angle < upLimit) && (data.angle > lowLimit))) {
        std::stringstream errorMessageStream;
        errorMessageStream << "The setpoint angle is out of range. The valid range is between " << lowLimit << " and " << upLimit << " and it is: " << data.angle;
        //    LOG(trace) << "abs_value: " << abs(data.angle) << " abslow " << abs(lowLimit) << " absupper " << abs(upLimit);
        throw std::out_of_range(errorMessageStream.str());
      }
    }

    messageBuffer.stctOutput.controllerMode = POSITION_CONTROL;
    messageBuffer.stctOutput.value = (int32) round((data.angle.value() * ((double) storage.encoderTicksPerRound / (2.0 * M_PI))) / storage.gearRatio);


    if (storage.inverseMovementDirection) {
      messageBuffer.stctOutput.value *= -1;
    }
    //   LOG(trace) << "value: " << data.angle << " gear " << gearRatio << " encoderperRound " << encoderTicksPerRound << " encPos " << messageBuffer.stctOutput.value << " joint " << this->jointNumber;
    ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
!!!795505.cpp!!!	setData(in data : JointEncoderSetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void

    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);
  
    if(storage.areLimitsActive){

      if (!((data.encoderTicks < this->storage.upperLimit) && (data.encoderTicks > this->storage.lowerLimit))) {
        std::stringstream errorMessageStream;
        errorMessageStream << "The setpoint angle is out of range. The valid range is between " << this->storage.lowerLimit << " and " << this->storage.upperLimit << " and it is: " << data.encoderTicks;
        //    LOG(trace) << "abs_value: " << abs(data.angle) << " abslow " << abs(lowLimit) << " absupper " << abs(upLimit);
        throw std::out_of_range(errorMessageStream.str());
      }
    }

    messageBuffer.stctOutput.controllerMode = POSITION_CONTROL;
    messageBuffer.stctOutput.value = data.encoderTicks;
    
    if (storage.inverseMovementDirection) {
      messageBuffer.stctOutput.value *= -1;
    }
    
     ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
!!!253169.cpp!!!	getData(out data : JointSensedAngle) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);

    if (storage.gearRatio == 0) {
      throw std::out_of_range("A Gear Ratio of zero is not allowed");
    }
    if (storage.encoderTicksPerRound == 0) {
      throw std::out_of_range("Zero Encoder Ticks per Round are not allowed");
    }
    //  LOG(trace) << "enc: " << messageBuffer.stctInput.actualPosition;
    data.angle = ((double) messageBuffer.stctInput.actualPosition / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;

    if (storage.inverseMovementDirection) {
      data.angle = -data.angle;
    }
!!!246641.cpp!!!	setData(in data : JointVelocitySetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void
  
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);
  
    messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;

    if (storage.gearRatio == 0) {
      throw std::out_of_range("A Gear Ratio of 0 is not allowed");
    }

    messageBuffer.stctOutput.value = (int32) round((data.angularVelocity.value() / (storage.gearRatio * 2.0 * M_PI)) * 60.0);
    if (storage.inverseMovementDirection) {
      messageBuffer.stctOutput.value *= -1;
    }

    //  LOG(trace) << "vel [rpm] " << messageBuffer.stctOutput.value << " rad_sec " << data.angularVelocity;
    ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
!!!253297.cpp!!!	getData(out data : JointSensedVelocity) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);

    if (storage.gearRatio == 0) {
      throw std::out_of_range("A Gear Ratio of 0 is not allowed");
    }
    double motorRPM = messageBuffer.stctInput.actualVelocity;
    //convert RPM of the motor to radian per second of the wheel/joint
    data.angularVelocity = ((motorRPM / 60.0) * storage.gearRatio * 2.0 * M_PI) * radian_per_second;
    
    if (storage.inverseMovementDirection) {
      data.angularVelocity *= -1;
    }
!!!715889.cpp!!!	getData(out data : JointSensedRoundsPerMinute) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);

    data.rpm = messageBuffer.stctInput.actualVelocity;
    
    if (storage.inverseMovementDirection) {
      data.rpm *= -1;
    }
!!!716017.cpp!!!	setData(in data : JointRoundsPerMinuteSetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);
    
    messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
    messageBuffer.stctOutput.value = data.rpm;
    
    if (storage.inverseMovementDirection) {
      messageBuffer.stctOutput.value *= -1;
    }

    ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
!!!253425.cpp!!!	getData(out data : JointSensedCurrent) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);
    //convert mili ampere to ampere
    double current = messageBuffer.stctInput.actualCurrent;
    data.current =  current / 1000.0 * ampere;
    
    if (storage.inverseMovementDirection) {
      data.current *= -1;
    }
!!!611825.cpp!!!	setData(in data : JointCurrentSetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);
    
    messageBuffer.stctOutput.controllerMode = CURRENT_MODE;
    messageBuffer.stctOutput.value = (int32) (data.current.value() * 1000.0);  //convert from Ampere to milli Ampere
    
    if (storage.inverseMovementDirection) {
      messageBuffer.stctOutput.value *= -1;
    }
    ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
!!!831473.cpp!!!	getData(out data : JointSensedPWM) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);

    data.pwm = messageBuffer.stctInput.actualPWM;
    
    if (storage.inverseMovementDirection) {
      data.pwm *= -1;
    }
    
!!!611953.cpp!!!	setData(in data : JointPWMSetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);
    
    messageBuffer.stctOutput.controllerMode = PWM_MODE;
    messageBuffer.stctOutput.value = data.pwm;
    
    if (storage.inverseMovementDirection) {
      messageBuffer.stctOutput.value *= -1;
    }
    ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
!!!702449.cpp!!!	getData(out data : JointSensedEncoderTicks) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);

    //  LOG(trace) << "enc: " << messageBuffer.stctInput.actualPosition;
    data.encoderTicks = messageBuffer.stctInput.actualPosition ;
    
    if (storage.inverseMovementDirection) {
      data.encoderTicks *= -1;
    }

!!!808561.cpp!!!	setData(in data : SlaveMessageOutput, in communicationMode : SyncMode = NON_BLOCKING) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);
    
    messageBuffer.stctOutput = data;
  
    ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
!!!808689.cpp!!!	getData(out data : YouBotSlaveMsg) : void
    //YouBotSlaveMsg messageBuffer;
    ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);

    data = messageBuffer;
!!!815217.cpp!!!	setData(in data : JointTorqueSetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void
    JointCurrentSetpoint currentSetpoint;
    
    if (this->storage.torqueConstant == 0) {
      throw std::out_of_range("A torque constant of 0 is not allowed");
    }
   
    currentSetpoint.current = ((data.torque.value()*this->storage.gearRatio)/this->storage.torqueConstant) * ampere;
    this->setData(currentSetpoint);
!!!815345.cpp!!!	getData(out data : JointSensedTorque) : void
  JointSensedCurrent sensedCurrent;
  this->getData(sensedCurrent);
  
  if (this->storage.gearRatio == 0) {
    throw std::out_of_range("A Gear Ratio of 0 is not allowed");
  }
  data.torque = ((sensedCurrent.current.value() * this->storage.torqueConstant) / this->storage.gearRatio) * newton_meter;
!!!708977.cpp!!!	getUserVariable(in index : uint, out data : int) : void
  
  if(index == 0 || index > 55){
    throw JointParameterException("User variable index is out of range use 1-55 at: " + this->jointName);
  }
  //56 is the last userdata at bank 2
    YouBotSlaveMailboxMsg message;
    message.stctOutput.moduleAddress = DRIVE;
    message.stctOutput.commandNumber = GGP;
    message.stctOutput.typeNumber = index;
    message.stctOutput.motorNumber = USER_VARIABLE_BANK;
    message.stctOutput.value = 0;
    
   if (!retrieveValueFromMotorContoller(message)) {
     throw JointParameterException("Unable to get parameter from joint: " + this->jointName);
   }
   this->parseMailboxStatusFlags(message);
   
   data = message.stctInput.value;
!!!709105.cpp!!!	setUserVariable(in index : uint, in data : int) : void
  
  if(index == 0 || index > 55){
    throw JointParameterException("User variable index is out of range use 1-55 at: " + this->jointName);
  }
  //56 is the last userdata at bank 2
    YouBotSlaveMailboxMsg message;
    message.stctOutput.moduleAddress = DRIVE;
    message.stctOutput.commandNumber = GGP;
    message.stctOutput.typeNumber = index;
    message.stctOutput.motorNumber = USER_VARIABLE_BANK;
    message.stctOutput.value = data;
    
  if (!setValueToMotorContoller(message)) {
     throw JointParameterException("Unable to set parameter at joint: " + this->jointName);
   }
    this->parseMailboxStatusFlags(message);
!!!709233.cpp!!!	getStatus(out statusMessages : std::vector<std::string>) : void
  //YouBotSlaveMsg messageBuffer;
  ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
  
  
  

    if (messageBuffer.stctInput.errorFlags & OVER_CURRENT) {
      statusMessages.push_back(jointNameString + "got over current");
    }

    if (messageBuffer.stctInput.errorFlags & UNDER_VOLTAGE) {
      statusMessages.push_back(jointNameString + "got under voltage");
    }

    if (messageBuffer.stctInput.errorFlags & OVER_VOLTAGE) {
      statusMessages.push_back(jointNameString + "got over voltage");
    }

    if (messageBuffer.stctInput.errorFlags & OVER_TEMPERATURE) {
      statusMessages.push_back(jointNameString + "got over temperature");
    }

    if (messageBuffer.stctInput.errorFlags & MOTOR_HALTED) {
      statusMessages.push_back(jointNameString + "is halted");
    }

    if (messageBuffer.stctInput.errorFlags & HALL_SENSOR_ERROR) {
      statusMessages.push_back(jointNameString + "got hall sensor problem");
    }

//    if (messageBuffer.stctInput.errorFlags & ENCODER_ERROR) {
//      statusMessages.push_back(jointNameString + "got encoder problem");
//    }
//
//     if (messageBuffer.stctInput.errorFlags & INITIALIZATION_ERROR) {
//      statusMessages.push_back(jointNameString + "got inizialization problem");
//    }

    if (messageBuffer.stctInput.errorFlags & PWM_MODE_ACTIVE) {
      statusMessages.push_back(jointNameString + "has PWM mode active");
    }

    if (messageBuffer.stctInput.errorFlags & VELOCITY_MODE) {
      statusMessages.push_back(jointNameString + "has velocity mode active");
    }

    if (messageBuffer.stctInput.errorFlags & POSITION_MODE) {
      statusMessages.push_back(jointNameString + "has position mode active");
    }

    if (messageBuffer.stctInput.errorFlags & TORQUE_MODE) {
      statusMessages.push_back(jointNameString + "has torque mode active");
    }

//    if (messageBuffer.stctInput.errorFlags & EMERGENCY_STOP) {
//      statusMessages.push_back(jointNameString + "has emergency stop active");
//    }
//
//    if (messageBuffer.stctInput.errorFlags & FREERUNNING) {
//      statusMessages.push_back(jointNameString + "has freerunning active");
//    }

    if (messageBuffer.stctInput.errorFlags & POSITION_REACHED) {
      statusMessages.push_back(jointNameString + "has position reached");
    }

    if (messageBuffer.stctInput.errorFlags & INITIALIZED) {
      statusMessages.push_back(jointNameString + "is initialized");
    }

    if (messageBuffer.stctInput.errorFlags & TIMEOUT) {
      statusMessages.push_back(jointNameString + "has a timeout");
    }

    if (messageBuffer.stctInput.errorFlags & I2T_EXCEEDED) {
      statusMessages.push_back(jointNameString + "exceeded I2t");
    }
  
  
!!!709361.cpp!!!	getStatus(out statusFlags : unsigned int) : void
  //YouBotSlaveMsg messageBuffer;
  ethercatMaster->getMsgBuffer(this->jointNumber, messageBuffer);
  
  statusFlags = messageBuffer.stctInput.errorFlags;
!!!716145.cpp!!!	setEncoderToZero() : void

    //YouBotSlaveMsg messageBuffer;
    messageBuffer.stctOutput.controllerMode = SET_POSITION_TO_REFERENCE;
    messageBuffer.stctOutput.value = 0;

    ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);

!!!419057.cpp!!!	noMoreAction() : void
    //YouBotSlaveMsg messageBuffer;
    messageBuffer.stctOutput.controllerMode = NO_MORE_ACTION;
    messageBuffer.stctOutput.value = 0;

    ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
!!!418929.cpp!!!	stopJoint() : void
    //YouBotSlaveMsg messageBuffer;
    messageBuffer.stctOutput.controllerMode = MOTOR_STOP;
    messageBuffer.stctOutput.value = 0;

    ethercatMaster->setMsgBuffer(messageBuffer, this->jointNumber);
!!!959217.cpp!!!	getJointNumber() : unsigned int
  return this->jointNumber;
!!!951537.cpp!!!	setTrajectory(in positions : std::vector< quantity<plane_angle> >, in velocities : std::vector< quantity<angular_velocity> >, in accelerations : std::vector< quantity<angular_acceleration> >) : void
  std::list<int32> targetPositions;
  if(!this->trajectoryController.isTrajectoryControllerActive()){
    JointSensedAngle currentpose;
    JointSensedVelocity currentvel;
    this->getData(currentpose);
    this->getData(currentvel);
    lastVelocity = currentvel.angularVelocity;
    lastPosition = currentpose.angle;
  }
  
  for(unsigned int i = 0; i< positions.size(); i++) {
    this->calculatePositions(positions[i], lastPosition, velocities[i], lastVelocity,  accelerations[i], targetPositions);
    lastVelocity = velocities[i];
    lastPosition = positions[i];
  }
  
  this->trajectoryController.setTrajectoryPositions(targetPositions);
  
!!!951665.cpp!!!	cancelTrajectory() : void
  this->trajectoryController.cancelCurrentTrajectory();
!!!958577.cpp!!!	calculatePositions(in position : quantity<plane_angle>, in position_current : quantity<plane_angle>, in velocity : quantity<angular_velocity>, in velocity_current : quantity<angular_velocity>, in acceleration : quantity<angular_acceleration>, out targetPositions : std::list<int32>) : void
  
  quantity<plane_angle> targetposition;
  quantity<boost::units::si::time> timestep;
  quantity<boost::units::si::time> timestep2;
  quantity<plane_angle> targetpositionAfterAcc;
  quantity<plane_angle> positionThreshold = 0.01*radian;
  int u = 0;
  
  quantity<angular_velocity> velocity_calc;
	quantity<angular_velocity> zeroVel(0 * radian_per_second);
  quantity<angular_acceleration> zeroAcc(0 * radian_per_second/second);
	
	if(position < position_current && (velocity >=zeroVel || acceleration >=zeroAcc))
		 throw JointErrorException("Invalid trajectory");
	
	if(position > position_current && (velocity <=zeroVel || acceleration <=zeroAcc))
		 throw JointErrorException("Invalid trajectory");
  
  
  
  for(int i= 1; targetposition <= (position-positionThreshold) || targetposition >= (position+positionThreshold) ;i++){
      timestep = ((double)i/1000.0)* second;
      targetposition = position_current + (velocity_current * timestep) + ((acceleration * timestep * timestep)/2.0);
      velocity_calc = (acceleration * timestep) +velocity_current;
      
      if(acceleration >= (0 * radian_per_second/second)){
        if(velocity_calc >= velocity){
          if(u == 0){
            u = i;
            targetpositionAfterAcc = targetposition;
          }
          
          timestep2 = ((double)(i-u)/1000.0)* second;
          targetposition = targetpositionAfterAcc + (velocity  * timestep2);
        }
      }else{
        if(velocity_calc <= velocity){
          if(u == 0){
            u = i;
            targetpositionAfterAcc = targetposition;
          }
          
          timestep2 = ((double)(i-u)/1000.0)* second;
          targetposition = targetpositionAfterAcc + (velocity  * timestep2);
        }
      }

    
    //////////////////////////////////////////////////
    if (storage.gearRatio == 0) {
      throw std::out_of_range("A Gear Ratio of zero is not allowed");
    }
    
    if (storage.encoderTicksPerRound == 0) {
      throw std::out_of_range("Zero Encoder Ticks per Round are not allowed");
    }

    if(storage.areLimitsActive){

      quantity<plane_angle> lowLimit = ((double) this->storage.lowerLimit / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
      quantity<plane_angle> upLimit = ((double) this->storage.upperLimit / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
      
      if (storage.inverseMovementDirection) {
        upLimit = ((double) -(this->storage.lowerLimit) / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
        lowLimit = ((double) -(this->storage.upperLimit) / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
      }
      

      if (!((targetposition < upLimit) && (targetposition > lowLimit))) {
        std::stringstream errorMessageStream;
        errorMessageStream << "The setpoint angle is out of range. The valid range is between " << lowLimit << " and " << upLimit << " and it is: " << targetposition;
        //    LOG(trace) << "abs_value: " << abs(data.angle) << " abslow " << abs(lowLimit) << " absupper " << abs(upLimit);
        throw std::out_of_range(errorMessageStream.str());
      }
    }
    int32 targetposition_enc;

    targetposition_enc = (int32) round((targetposition.value() * ((double) storage.encoderTicksPerRound / (2.0 * M_PI))) / storage.gearRatio);


    if (storage.inverseMovementDirection) {
      targetposition_enc *= -1;
    }
    
    targetPositions.push_back(targetposition_enc); 
  }
  
!!!281329.cpp!!!	parseYouBotErrorFlags(in messageBuffer : YouBotSlaveMsg) : void

    if (messageBuffer.stctInput.errorFlags & OVER_CURRENT) {
      LOG(warning) << jointNameString << "over current";
      //    throw JointErrorException(jointNameString + "got over current");
    }

    if (messageBuffer.stctInput.errorFlags & UNDER_VOLTAGE) {
      LOG(warning) << jointNameString << "under voltage";
      //    throw JointErrorException(jointNameString + "got under voltage");
    }

    if (messageBuffer.stctInput.errorFlags & OVER_VOLTAGE) {
      LOG(warning) << jointNameString << "over voltage";
      //   throw JointErrorException(jointNameString + "got over voltage");
    }

    if (messageBuffer.stctInput.errorFlags & OVER_TEMPERATURE) {
      LOG(warning) << jointNameString << "over temperature";
      //   throw JointErrorException(jointNameString + "got over temperature");
    }

    if (messageBuffer.stctInput.errorFlags & MOTOR_HALTED) {
      //   LOG(info) << jointNameString << "is halted";
      //   throw JointErrorException(jointNameString + "is halted");
    }

    if (messageBuffer.stctInput.errorFlags & HALL_SENSOR_ERROR) {
      LOG(warning) << jointNameString << "hall sensor problem";
      //   throw JointErrorException(jointNameString + "got hall sensor problem");
    }

//    if (messageBuffer.stctInput.errorFlags & ENCODER_ERROR) {
//      LOG(warning) << jointNameString << "encoder problem";
//      //   throw JointErrorException(jointNameString + "got encoder problem");
//    }
//
//     if (messageBuffer.stctInput.errorFlags & INITIALIZATION_ERROR) {
//      LOG(warning) << jointNameString << "initialization problem";
//      //   throw JointErrorException(jointNameString + "got motor winding problem");
//    }

    if (messageBuffer.stctInput.errorFlags & PWM_MODE_ACTIVE) {
   //   LOG(info) << jointNameString << "has PWM mode active";
      //   throw JointErrorException(jointNameString + "the cycle time is violated");
    }

    if (messageBuffer.stctInput.errorFlags & VELOCITY_MODE) {
   //   LOG(info) << jointNameString << "has velocity mode active";
      //   throw JointErrorException(jointNameString + "need to initialize the sinus commutation");
    }

    if (messageBuffer.stctInput.errorFlags & POSITION_MODE) {
   //   LOG(info) << jointNameString << "has position mode active";
      //   throw JointErrorException(jointNameString + "need to initialize the sinus commutation");
    }

    if (messageBuffer.stctInput.errorFlags & TORQUE_MODE) {
   //   LOG(info) << jointNameString << "has torque mode active";
      //   throw JointErrorException(jointNameString + "need to initialize the sinus commutation");
    }

//    if (messageBuffer.stctInput.errorFlags & EMERGENCY_STOP) {
//      LOG(info) << jointNameString << "emergency stop active";
//      //   throw JointErrorException(jointNameString + "need to initialize the sinus commutation");
//    }
//
//    if (messageBuffer.stctInput.errorFlags & FREERUNNING) {
//   //   LOG(info) << jointNameString << "has freerunning active";
//      //   throw JointErrorException(jointNameString + "need to initialize the sinus commutation");
//    }

    if (messageBuffer.stctInput.errorFlags & POSITION_REACHED) {
  //    LOG(info) << jointNameString << "has position reached";
      //   throw JointErrorException(jointNameString + "need to initialize the sinus commutation");
    }

    if (!(messageBuffer.stctInput.errorFlags & INITIALIZED)) {
      LOG(warning) << jointNameString << "not initialized";
      //   throw JointErrorException(jointNameString + "need to initialize the sinus commutation");
    }

    if (messageBuffer.stctInput.errorFlags & TIMEOUT) {
      LOG(warning) << jointNameString << "exceeded timeout";
      //   throw JointErrorException(jointNameString + "need to initialize the sinus commutation");
    }

    if (messageBuffer.stctInput.errorFlags & I2T_EXCEEDED) {
      LOG(warning) << jointNameString << "exceeded I2t";
      //   throw JointErrorException(jointNameString + "need to initialize the sinus commutation");
    }

!!!482289.cpp!!!	parseMailboxStatusFlags(in mailboxMsg : YouBotSlaveMailboxMsg) : void

    switch(mailboxMsg.stctInput.status){
      case NO_ERROR:
        break;
      case INVALID_COMMAND:
        LOG(error) << jointNameString << "Parameter name: " << mailboxMsg.parameterName << "; Command no: " << mailboxMsg.stctOutput.commandNumber << " is an invalid command!" ;
      //    throw JointParameterException(jointNameString + "invalid command");
        break;
      case WRONG_TYPE:
        LOG(error) << jointNameString << "Parameter name: " << mailboxMsg.parameterName << " has a wrong type!";
      //    throw JointParameterException(jointNameString + "wrong type");
        break;
      case INVALID_VALUE:
        LOG(error) << jointNameString << "Parameter name: " << mailboxMsg.parameterName << " Value: " << mailboxMsg.stctOutput.value << " is a invalid value!";
      //    throw JointParameterException(jointNameString + "invalid value");
        break;
      case CONFIGURATION_EEPROM_LOCKED:
        LOG(error) << jointNameString << "Parameter name: " << mailboxMsg.parameterName << " - Configuration EEPROM locked";
      //    throw JointParameterException(jointNameString + "configuration EEPROM locked");
        break;
      case COMMAND_NOT_AVAILABLE:
        LOG(error) << jointNameString << "Parameter name: " << mailboxMsg.parameterName << " - Command is not available!";
      //    throw JointParameterException(jointNameString + "command not available");
        break;
      case REPLY_WRITE_PROTECTED:
        LOG(error) << jointNameString << "Parameter name: " << mailboxMsg.parameterName << " - Permissions denied!";
      //    throw JointParameterException(jointNameString + "command not available");
        break;
    }
   

!!!376177.cpp!!!	retrieveValueFromMotorContoller(out message : YouBotSlaveMailboxMsg) : bool

    bool unvalid = true;
    unsigned int retry = 0;

    ethercatMaster->setMailboxMsgBuffer(message, this->jointNumber);

    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {
      ethercatMaster->getMailboxMsgBuffer(message, this->jointNumber);
    /*     LOG(trace) << "CommandNumber " << (int) message.stctInput.commandNumber
                 << " moduleAddress " << (int) message.stctInput.moduleAddress
                 << " replyAddress " << (int) message.stctInput.replyAddress
                 << " status " << (int) message.stctInput.status
                 << " value " << message.stctInput.value; */
       
      if (message.stctOutput.commandNumber == message.stctInput.commandNumber &&
              message.stctInput.status == NO_ERROR) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      this->parseMailboxStatusFlags(message);
      return false;
    } else {
      return true;
    }

!!!346865.cpp!!!	setValueToMotorContoller(in mailboxMsg : YouBotSlaveMailboxMsg) : bool

    YouBotSlaveMailboxMsg mailboxMsgBuffer;
    mailboxMsgBuffer = mailboxMsg;
    bool unvalid = true;
    unsigned int retry = 0;

    ethercatMaster->setMailboxMsgBuffer(mailboxMsgBuffer, this->jointNumber);

    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {
      ethercatMaster->getMailboxMsgBuffer(mailboxMsgBuffer, this->jointNumber);
      /*    LOG(trace) << "CommandNumber " << (int) mailboxMsgBuffer.stctInput.commandNumber
                  << " moduleAddress " << (int) mailboxMsgBuffer.stctInput.moduleAddress
                  << " replyAddress " << (int) mailboxMsgBuffer.stctInput.replyAddress
                  << " status " << (int) mailboxMsgBuffer.stctInput.status
                  << " value " << mailboxMsgBuffer.stctInput.value;
       */
      if (mailboxMsgBuffer.stctOutput.commandNumber == mailboxMsgBuffer.stctInput.commandNumber &&
              mailboxMsgBuffer.stctOutput.value == mailboxMsgBuffer.stctInput.value &&
              mailboxMsgBuffer.stctInput.status == NO_ERROR) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      this->parseMailboxStatusFlags(mailboxMsgBuffer);
      return false;
    } else {
      return true;
    }

