class YouBotGripper
!!!389105.cpp!!!	YouBotGripper(in jointNo : uint, in configFilePath : std::string = "../config/")
    bar1 = NULL;
    bar2 = NULL;
    this->jointNumber = jointNo;
    this->mailboxMsgRetries = 200;
    this->timeTillNextMailboxUpdate = 1; //ms
    this->maxTravelDistance = 0.023 * meter;
    this->maxEncoderValue = 67000;
    this->barSpacingOffset = 0 * meter;
    ethercatMaster = &(EthercatMaster::getInstance("youbot-ethercat.cfg", configFilePath));
    bar1 = new YouBotGripperBar(0, jointNo, configFilePath);
    bar2 = new YouBotGripperBar(1, jointNo, configFilePath);
!!!389233.cpp!!!	~YouBotGripper()
    delete bar1;
    delete bar2;
    bar1 = NULL;
    bar2 = NULL;
!!!392177.cpp!!!	getConfigurationParameter(out parameter : GripperParameter) : void
    throw std::runtime_error("Please use YouBotGripperParameter");
!!!391793.cpp!!!	setConfigurationParameter(in parameter : GripperParameter) : void
    throw std::runtime_error("Please use YouBotGripperParameter");
!!!782193.cpp!!!	getConfigurationParameter(out parameter : GripperFirmwareVersion) : void

    YouBotSlaveMailboxMsg message;
    parameter.getYouBotMailboxMsg(message);

    bool unvalid = true;
    unsigned int retry = 0;

    ethercatMaster->setMailboxMsgBuffer(message, this->jointNumber);
    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {
      if (ethercatMaster->getMailboxMsgBuffer(message, this->jointNumber)) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      this->parseMailboxStatusFlags(message);
      throw std::runtime_error("Unable to get firmware version of the gripper");
      return;
    }

    char versionString[8] = {0};
    //  versionString[0] = message.stctInput.replyAddress;
    versionString[0] = message.stctInput.moduleAddress;
    versionString[1] = message.stctInput.status;
    versionString[2] = message.stctInput.commandNumber;
    versionString[3] = message.stctInput.value >> 24;
    versionString[4] = message.stctInput.value >> 16;
    versionString[5] = message.stctInput.value >> 8;
    versionString[6] = message.stctInput.value & 0xff;

    // LOG(warning) <<"version: "<< versionString;
    int controllerType = 0;
    float firmwareVersion = 0;
    sscanf(versionString, "%dV%f", &controllerType, &firmwareVersion); //KR842V20


    parameter.setParameter(controllerType, firmwareVersion);

    return;
!!!295537.cpp!!!	setConfigurationParameter(in parameter : CalibrateGripper) : void

    if (parameter.value) {
      LOG(info) << "Calibrate Gripper";


      StallGuard2Threshold threshold;
      threshold.setParameter(43);

      bar1->setConfigurationParameter(threshold);
      bar2->setConfigurationParameter(threshold);

      StallGuard2FilterEnable filter;
      filter.setParameter(false);
      bar1->setConfigurationParameter(filter);
      bar2->setConfigurationParameter(filter);

      StopOnStall stoponStall;
      stoponStall.setParameter(false);
      bar1->setConfigurationParameter(stoponStall);
      bar2->setConfigurationParameter(stoponStall);
      YouBotSlaveMailboxMsg message;


      message.stctOutput.moduleAddress = GRIPPER;
      message.stctOutput.commandNumber = MVP;
      message.stctOutput.typeNumber = 1; //move gripper relative
      message.stctOutput.value = this->maxEncoderValue;

      ActualLoadValue actualLoad;

      message.stctOutput.motorNumber = 0; //move bar 0
      setValueToMotorContoller(message);

      message.stctOutput.motorNumber = 1; //move bar 1
      setValueToMotorContoller(message);

      bar1->getConfigurationParameter(actualLoad);
      bar2->getConfigurationParameter(actualLoad);


      unsigned int loadbar1 = 1000;
      unsigned int loadbar2 = 1000;
      std::string parameterString;

      for (int i = 0; i < 40; i++) {
        bar1->getConfigurationParameter(actualLoad);
        actualLoad.getParameter(loadbar1);
        bar2->getConfigurationParameter(actualLoad);
        actualLoad.getParameter(loadbar2);
        if (loadbar1 < 400 || loadbar2 < 400)
          break;
        //   actualLoad.toString(parameterString);
        //   std::cout << parameterString << std::endl;
        SLEEP_MILLISEC(10);
      }

      //     SLEEP_MILLISEC(4000); //wait until the gripper is closed

      //stop Gripper motor
      message.stctOutput.moduleAddress = GRIPPER;
      message.stctOutput.commandNumber = MST;

      message.stctOutput.value = 0;
      message.stctOutput.motorNumber = 0; //move bar 0
      setValueToMotorContoller(message);

      message.stctOutput.motorNumber = 1; //move bar 1
      setValueToMotorContoller(message);

      // set pose to zero as reference
      ActualPosition actualPose;
      actualPose.setParameter(0);
      bar1->setConfigurationParameter(actualPose);
      bar2->setConfigurationParameter(actualPose);

    }

!!!399473.cpp!!!	setConfigurationParameter(in parameter : BarSpacingOffset) : void
    this->barSpacingOffset = parameter.value;
!!!882545.cpp!!!	getConfigurationParameter(out parameter : BarSpacingOffset) : void
    parameter.value = this->barSpacingOffset;
!!!400881.cpp!!!	setConfigurationParameter(in parameter : MaxTravelDistance) : void
    this->maxTravelDistance = parameter.value;
!!!882673.cpp!!!	getConfigurationParameter(out parameter : MaxTravelDistance) : void
    parameter.value = this->maxTravelDistance;
!!!401009.cpp!!!	setConfigurationParameter(in parameter : MaxEncoderValue) : void
    this->maxEncoderValue = parameter.value;
!!!882801.cpp!!!	getConfigurationParameter(out parameter : MaxEncoderValue) : void
    parameter.value = this->maxEncoderValue;
!!!911729.cpp!!!	getConfigurationParameter(inout parameter : YouBotSlaveMailboxMsg) : void
    if (!retrieveValueFromMotorContoller(parameter)) {
      throw JointParameterException("Unable to get parameter from the gripper");
    }
    this->parseMailboxStatusFlags(parameter);
!!!392049.cpp!!!	getData(in data : GripperData) : void
    LOG(info) << "Nothing to do";
!!!391921.cpp!!!	setData(in data : GripperData) : void
    LOG(info) << "Nothing to do";
!!!295921.cpp!!!	getData(out data : OneDOFGripperData) : void
    LOG(info) << "Nothing to do";
!!!295793.cpp!!!	setData(in data : OneDOFGripperData) : void
    LOG(info) << "Nothing to do";
!!!391409.cpp!!!	setData(in barSpacing : GripperBarSpacingSetPoint) : void

    if (barSpacing.barSpacing > (maxTravelDistance + barSpacingOffset) || barSpacing.barSpacing < barSpacingOffset) {
      std::stringstream errorMessageStream;
      errorMessageStream << "The bar spacing is not allowed to be less than 0 m or higher than " << (maxTravelDistance + barSpacingOffset);
      throw std::out_of_range(errorMessageStream.str());
    }

    GripperBarEncoterSetpoint setpointBar1;
    GripperBarEncoterSetpoint setpointBar2;

    setpointBar1.barEncoder = (barSpacing.barSpacing + barSpacingOffset) / maxTravelDistance * maxEncoderValue;
    setpointBar2.barEncoder = (barSpacing.barSpacing + barSpacingOffset) / maxTravelDistance * maxEncoderValue;


    bar1->setData(setpointBar1);
    bar2->setData(setpointBar2);

!!!391537.cpp!!!	getData(out barSpacing : GripperSensedBarSpacing) : void

    int valueBar1 = 0;
    int valueBar2 = 0;

    ActualPosition actualPoseBar1;
    ActualPosition actualPoseBar2;

    bar1->getConfigurationParameter(actualPoseBar1);
    bar2->getConfigurationParameter(actualPoseBar2);
    actualPoseBar1.getParameter(valueBar1);
    actualPoseBar2.getParameter(valueBar2);


    quantity<si::length> bar1Pose;
    quantity<si::length> bar2Pose;
    bar1Pose = (((double) valueBar1 / maxEncoderValue) * (maxTravelDistance / 2.0)) + barSpacingOffset;

    bar2Pose = (((double) valueBar2 / maxEncoderValue) * (maxTravelDistance / 2.0)) + barSpacingOffset;

    barSpacing.barSpacing = bar1Pose + bar2Pose;


!!!932849.cpp!!!	open() : void
    GripperBarSpacingSetPoint barSpacing;
    barSpacing.barSpacing = 0.023 * meter;

    this->setData(barSpacing);

!!!932977.cpp!!!	closeUntilMaxForce() : bool
    StallGuard2Threshold threshold;
    threshold.setParameter(43);

    bar1->setConfigurationParameter(threshold);
    bar2->setConfigurationParameter(threshold);

    StallGuard2FilterEnable filter;
    filter.setParameter(false);
    bar1->setConfigurationParameter(filter);
    bar2->setConfigurationParameter(filter);

    StopOnStall stoponStall;
    stoponStall.setParameter(false);
    bar1->setConfigurationParameter(stoponStall);
    bar2->setConfigurationParameter(stoponStall);
    YouBotSlaveMailboxMsg message;


    message.stctOutput.moduleAddress = GRIPPER;
    message.stctOutput.commandNumber = MVP;
    message.stctOutput.typeNumber = 1; //move gripper relative
    message.stctOutput.value = this->maxEncoderValue;

    ActualLoadValue actualLoad;

    message.stctOutput.motorNumber = 0; //move bar 0
    setValueToMotorContoller(message);

    message.stctOutput.motorNumber = 1; //move bar 1
    setValueToMotorContoller(message);

    bar1->getConfigurationParameter(actualLoad);
    bar2->getConfigurationParameter(actualLoad);


    unsigned int loadbar1 = 1000;
    unsigned int loadbar2 = 1000;
    std::string parameterString;

    for (int i = 0; i < 40; i++) {
      bar1->getConfigurationParameter(actualLoad);
      actualLoad.getParameter(loadbar1);
      bar2->getConfigurationParameter(actualLoad);
      actualLoad.getParameter(loadbar2);
      if (loadbar1 < 400 || loadbar2 < 400)
        break;
      //   actualLoad.toString(parameterString);
      //   std::cout << parameterString << std::endl;
      SLEEP_MILLISEC(10);
    }

    //     SLEEP_MILLISEC(4000); //wait until the gripper is closed

    //stop Gripper motor
    message.stctOutput.moduleAddress = GRIPPER;
    message.stctOutput.commandNumber = MST;

    message.stctOutput.value = 0;
    message.stctOutput.motorNumber = 0; //move bar 0
    setValueToMotorContoller(message);

    message.stctOutput.motorNumber = 1; //move bar 1
    setValueToMotorContoller(message);

!!!921585.cpp!!!	getGripperBar1() : YouBotGripperBar&
    if (bar1 == NULL)
      throw std::runtime_error("gripper bar 1 is missing");

    return *bar1;
!!!921713.cpp!!!	getGripperBar2() : YouBotGripperBar&
    if (bar2 == NULL)
      throw std::runtime_error("gripper bar 2 is missing");

    return *bar2;
!!!482417.cpp!!!	parseMailboxStatusFlags(in mailboxMsg : YouBotSlaveMailboxMsg) : void
    std::stringstream errorMessageStream;
    errorMessageStream << "Joint " << this->jointNumber << ": ";
    std::string errorMessage;
    errorMessage = errorMessageStream.str();


    switch (mailboxMsg.stctInput.status) {
      case NO_ERROR:
        break;
      case INVALID_COMMAND:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << "; Command no: " << mailboxMsg.stctOutput.commandNumber << " is an invalid command!";
        //    throw JointParameterException(errorMessage + "invalid command");
        break;
      case WRONG_TYPE:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << " has a wrong type!";
        //    throw JointParameterException(errorMessage + "wrong type");
        break;
      case INVALID_VALUE:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << " Value: " << mailboxMsg.stctOutput.value << " is a invalid value!";
        //    throw JointParameterException(errorMessage + "invalid value");
        break;
      case CONFIGURATION_EEPROM_LOCKED:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << " Configuration EEPROM locked";
        //    throw JointParameterException(errorMessage + "configuration EEPROM locked");
        break;
      case COMMAND_NOT_AVAILABLE:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << "; Command no: " << mailboxMsg.stctOutput.commandNumber << "Command is not available!";
        //    throw JointParameterException(errorMessage + "command not available");
        break;
    }


!!!388977.cpp!!!	setValueToMotorContoller(in mailboxMsg : YouBotSlaveMailboxMsg) : bool

    YouBotSlaveMailboxMsg mailboxMsgBuffer;
    mailboxMsgBuffer = mailboxMsg;
    bool unvalid = true;
    unsigned int retry = 0;

    ethercatMaster->setMailboxMsgBuffer(mailboxMsgBuffer, this->jointNumber);
    //    LOG(trace) << "set Output CommandNumber " << (int) mailboxMsgBuffer.stctOutput.commandNumber
    //                  << " moduleAddress " << (int) mailboxMsgBuffer.stctOutput.moduleAddress
    //                  << " motorNumber " << (int) mailboxMsgBuffer.stctOutput.motorNumber
    //                  << " typeNumber " << (int) mailboxMsgBuffer.stctOutput.typeNumber
    //                  << " value " << mailboxMsgBuffer.stctOutput.value;

    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {


      if (ethercatMaster->getMailboxMsgBuffer(mailboxMsgBuffer, this->jointNumber) &&
              mailboxMsgBuffer.stctInput.status == NO_ERROR) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
      //      LOG(trace) << "set Input CommandNumber " << (int) mailboxMsgBuffer.stctInput.commandNumber
      //                  << " moduleAddress " << (int) mailboxMsgBuffer.stctInput.moduleAddress
      //                  << " replyAddress " << (int) mailboxMsgBuffer.stctInput.replyAddress
      //                  << " status " << (int) mailboxMsgBuffer.stctInput.status
      //                  << " value " << mailboxMsgBuffer.stctInput.value;
    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      this->parseMailboxStatusFlags(mailboxMsgBuffer);
      return false;
    } else {
      return true;
    }

!!!388849.cpp!!!	retrieveValueFromMotorContoller(out message : YouBotSlaveMailboxMsg) : bool

    bool unvalid = true;
    unsigned int retry = 0;

    ethercatMaster->setMailboxMsgBuffer(message, this->jointNumber);
    //     LOG(trace) << "get Output CommandNumber " << (int) message.stctOutput.commandNumber
    //                  << " moduleAddress " << (int) message.stctOutput.moduleAddress
    //                  << " motorNumber " << (int) message.stctOutput.motorNumber
    //                  << " typeNumber " << (int) message.stctOutput.typeNumber
    //                  << " value " << message.stctOutput.value
    //                  << " No " << this->jointNumber;

    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {


      if (ethercatMaster->getMailboxMsgBuffer(message, this->jointNumber) &&
              message.stctInput.status == NO_ERROR) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
      //      LOG(trace) << "get input CommandNumber " << (int) message.stctInput.commandNumber
      //                 << " moduleAddress " << (int) message.stctInput.moduleAddress
      //                 << " replyAddress " << (int) message.stctInput.replyAddress
      //                 << " status " << (int) message.stctInput.status
      //                 << " value " << message.stctInput.value
      //                 << " No " << this->jointNumber;

    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      this->parseMailboxStatusFlags(message);
      return false;
    } else {
      return true;
    }

