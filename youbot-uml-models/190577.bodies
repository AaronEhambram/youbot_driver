class EthercatMasterWithThread
!!!266609.cpp!!!	EthercatMasterWithThread(in configFile : std::string, in configFilePath : std::string)

	  this->ethercatConnectionEstablished = false;
    ethernetDevice = "eth0";
    timeTillNextEthercatUpdate = 1000; //usec
    mailboxTimeout = 4000; //micro sec
    ethercatTimeout = 500; //micro sec
    communicationErrors = 0;
    maxCommunicationErrors = 100;
    stopThread = false;
    newDataFlagOne = false;
    newDataFlagTwo = false;
    this->automaticSendOn = true;
    this->automaticReceiveOn = true;
    this->configFileName = configFile;
    this->configFilepath = configFilePath;
    configfile = NULL;

    //initialize to zero
    for (unsigned int i = 0; i < 4096; i++) {
      IOmap_[i] = 0;
    }
    //read ethercat parameters form config file
    configfile = new ConfigFile(this->configFileName, this->configFilepath);

    // configfile.setSection("EtherCAT");
    configfile->readInto(ethernetDevice, "EtherCAT", "EthernetDevice");
    configfile->readInto(timeTillNextEthercatUpdate, "EtherCAT", "EtherCATUpdateRate_[usec]");
    configfile->readInto(ethercatTimeout, "EtherCAT", "EtherCATTimeout_[usec]");
    configfile->readInto(mailboxTimeout, "EtherCAT", "MailboxTimeout_[usec]");
    configfile->readInto(maxCommunicationErrors, "EtherCAT", "MaximumNumberOfEtherCATErrors");
    
    this->initializeEthercat();


!!!266737.cpp!!!	~EthercatMasterWithThread()
    stopThread = true;
    threads.join_all();
    this->closeEthercat();
    if (configfile != NULL)
      delete configfile;
!!!944881.cpp!!!	isThreadActive() : bool
  return true;
!!!281201.cpp!!!	getNumberOfSlaves() : unsigned int
    return this->nrOfSlaves;
!!!488945.cpp!!!	AutomaticSendOn(in enableAutomaticSend : bool) : void
    this->automaticSendOn = enableAutomaticSend;


    if (this->automaticSendOn == true) {
      unsigned int slaveNo = 0;

      if (newDataFlagOne == true) {
        {
          boost::mutex::scoped_lock dataMutex1(mutexDataOne);
          for (unsigned int i = 0; i < automaticSendOffBufferVector.size(); i++) {
            slaveNo = automaticSendOffBufferVector[i].jointNumber - 1;
            firstBufferVector[slaveNo].stctOutput = automaticSendOffBufferVector[i].stctOutput;
            newOutputDataFlagOne[slaveNo] = true;
            newOutputDataFlagTwo[slaveNo] = false;
          }
        }
        automaticSendOffBufferVector.clear();
      } else if (newDataFlagTwo == true) {
        {
          boost::mutex::scoped_lock dataMutex2(mutexDataTwo);
          for (unsigned int i = 0; i < automaticSendOffBufferVector.size(); i++) {
            slaveNo = automaticSendOffBufferVector[i].jointNumber - 1;
            secondBufferVector[slaveNo].stctOutput = automaticSendOffBufferVector[i].stctOutput;
            newOutputDataFlagOne[slaveNo] = false;
            newOutputDataFlagTwo[slaveNo] = true;
          }
        }
        automaticSendOffBufferVector.clear();
      } else {
        return;
      }

    }

    return;
!!!588657.cpp!!!	AutomaticReceiveOn(in enableAutomaticReceive : bool) : void
    this->automaticReceiveOn = enableAutomaticReceive;


    if (this->automaticReceiveOn == false) {
      if (newDataFlagOne == true) {
        {
          boost::mutex::scoped_lock dataMutex1(mutexDataOne);
          this->automaticReceiveOffBufferVector = firstBufferVector;
        }
      } else if (newDataFlagTwo == true) {
        {
          boost::mutex::scoped_lock dataMutex2(mutexDataTwo);
          this->automaticReceiveOffBufferVector = firstBufferVector;
        }
      }
    }

    return;
!!!401137.cpp!!!	getEthercatDiagnosticInformation(out ethercatSlaveInfos : std::vector<ec_slavet>) : void
    ethercatSlaveInfos = this->ethercatSlaveInfo;
    for (unsigned int i = 0; i < ethercatSlaveInfos.size(); i++) {
      ethercatSlaveInfos[i].inputs = NULL;
      ethercatSlaveInfos[i].outputs = NULL;
    }
!!!944369.cpp!!!	sendProcessData() : bool
    throw std::runtime_error("When using the EthercatMaster with thread there is not need to send process data manual.");
    return false;
!!!944497.cpp!!!	receiveProcessData() : bool
    throw std::runtime_error("When using the EthercatMaster with thread there is not need to receive process data manual");
    return false;
!!!944625.cpp!!!	isErrorInSoemDriver() : bool
   
    return ec_iserror();

!!!965873.cpp!!!	registerJointTrajectoryController(inout object : JointTrajectoryController*, in JointNumber : uint) : void
	{
    boost::mutex::scoped_lock trajectoryControllerMutex(trajectoryControllerVectorMutex);
		if(this->trajectoryControllers[JointNumber -1] != NULL)
			throw std::runtime_error("A joint trajectory controller is already register for this joint!");
		if((JointNumber -1) >= this->trajectoryControllers.size())
			throw std::out_of_range("Invalid joint number");
		
    this->trajectoryControllers[JointNumber -1] = object;
  }
  LOG(debug) << "register joint trajectory controller for joint: " << JointNumber;
!!!984817.cpp!!!	deleteJointTrajectoryControllerRegistration(in JointNumber : uint) : void
  {
    boost::mutex::scoped_lock trajectoryControllerMutex(trajectoryControllerVectorMutex);
		if((JointNumber -1) >= this->trajectoryControllers.size())
			throw std::out_of_range("Invalid joint number");
		
    this->trajectoryControllers[JointNumber -1] = NULL;
  }
  LOG(debug) << "delete joint trajectory controller registration for joint: " << JointNumber;
!!!999921.cpp!!!	getNumberOfThreadCyclesPerSecond() : uint
	
	return static_cast<unsigned int>(1.0/((double)timeTillNextEthercatUpdate /1000/1000));
!!!1013617.cpp!!!	isEtherCATConnectionEstablished() : bool
	return this->ethercatConnectionEstablished;
!!!266481.cpp!!!	initializeEthercat() : void

    /* initialise SOEM, bind socket to ifname */
    if (ec_init(ethernetDevice.c_str())) {
      LOG(info) << "Initializing EtherCAT on " << ethernetDevice;
      /* find and auto-config slaves */
      if (ec_config(TRUE, &IOmap_) > 0) {

        LOG(trace) << ec_slavecount << " slaves found and configured.";

        /* wait for all slaves to reach Pre OP state */
        /*ec_statecheck(0, EC_STATE_PRE_OP,  EC_TIMEOUTSTATE);
        if (ec_slave[0].state != EC_STATE_PRE_OP ){
        printf("Not all slaves reached pre operational state.\n");
        ec_readstate();
        //If not all slaves operational find out which one
          for(int i = 1; i<=ec_slavecount ; i++){
            if(ec_slave[i].state != EC_STATE_PRE_OP){
              printf("Slave %d State=%2x StatusCode=%4x : %s\n",
              i, ec_slave[i].state, ec_slave[i].ALstatuscode, ec_ALstatuscode2string(ec_slave[i].ALstatuscode));
            }
          }
        }
         */

        /* distributed clock is not working
        //Configure distributed clock
        if(!ec_configdc()){
          LOG(warning) << "no distributed clock is available";
        }else{

          uint32 CyclTime = 4000000;
          uint32 CyclShift = 0;
          for (int i = 1; i <= ec_slavecount; i++) {
            ec_dcsync0(i, true, CyclTime, CyclShift);
          }

        }
         */

        /* wait for all slaves to reach SAFE_OP state */
        ec_statecheck(0, EC_STATE_SAFE_OP, EC_TIMEOUTSTATE);
        if (ec_slave[0].state != EC_STATE_SAFE_OP) {
          LOG(warning) << "Not all slaves reached safe operational state.";
          ec_readstate();
          //If not all slaves operational find out which one
          for (int i = 1; i <= ec_slavecount; i++) {
            if (ec_slave[i].state != EC_STATE_SAFE_OP) {
              LOG(info) << "Slave " << i << " State=" << ec_slave[i].state << " StatusCode=" << ec_slave[i].ALstatuscode << " : " << ec_ALstatuscode2string(ec_slave[i].ALstatuscode);

            }
          }
        }


        //Read the state of all slaves
        //ec_readstate();

        LOG(trace) << "Request operational state for all slaves";

        ec_slave[0].state = EC_STATE_OPERATIONAL;
        // request OP state for all slaves
        /* send one valid process data to make outputs in slaves happy*/
        ec_send_processdata();
        ec_receive_processdata(EC_TIMEOUTRET);
        /* request OP state for all slaves */
        ec_writestate(0);
        // wait for all slaves to reach OP state

        ec_statecheck(0, EC_STATE_OPERATIONAL, EC_TIMEOUTSTATE);
        if (ec_slave[0].state == EC_STATE_OPERATIONAL) {
          LOG(trace) << "Operational state reached for all slaves.";
        } else {
          throw std::runtime_error("Not all slaves reached operational state.");

        }

      } else {
        throw std::runtime_error("No slaves found!");
      }

    } else {
      throw std::runtime_error("No socket connection on " + ethernetDevice + "\nExcecute as root");
    }



    std::string baseJointControllerName = "TMCM-174";
    std::string manipulatorJointControllerName = "TMCM-174";
    std::string actualSlaveName;
    nrOfSlaves = 0;
    YouBotSlaveMsg emptySlaveMsg;

    configfile->readInto(baseJointControllerName, "BaseJointControllerName");
    configfile->readInto(manipulatorJointControllerName, "ManipulatorJointControllerName");

    //reserve memory for all slave with a input/output buffer
    for (int cnt = 1; cnt <= ec_slavecount; cnt++) {
      //     printf("Slave:%d Name:%s Output size:%3dbits Input size:%3dbits State:%2d delay:%d.%d\n",
      //             cnt, ec_slave[cnt].name, ec_slave[cnt].Obits, ec_slave[cnt].Ibits,
      //             ec_slave[cnt].state, (int) ec_slave[cnt].pdelay, ec_slave[cnt].hasdc);

      ethercatSlaveInfo.push_back(ec_slave[cnt]);

      actualSlaveName = ec_slave[cnt].name;
      if ((actualSlaveName == baseJointControllerName || actualSlaveName == manipulatorJointControllerName) && ec_slave[cnt].Obits > 0 && ec_slave[cnt].Ibits > 0) {
        nrOfSlaves++;
        //   joints.push_back(YouBotJoint(nrOfSlaves));

        firstBufferVector.push_back(emptySlaveMsg);
        secondBufferVector.push_back(emptySlaveMsg);
        ethercatOutputBufferVector.push_back((SlaveMessageOutput*) (ec_slave[cnt].outputs));
        ethercatInputBufferVector.push_back((SlaveMessageInput*) (ec_slave[cnt].inputs));
        YouBotSlaveMailboxMsg emptyMailboxSlaveMsg(cnt);
        firstMailboxBufferVector.push_back(emptyMailboxSlaveMsg);
        secondMailboxBufferVector.push_back(emptyMailboxSlaveMsg);
        newOutputDataFlagOne.push_back(false);
        newOutputDataFlagTwo.push_back(false);
        newMailboxDataFlagOne.push_back(false);
        newMailboxDataFlagTwo.push_back(false);
        newMailboxInputDataFlagOne.push_back(false);
        newMailboxInputDataFlagTwo.push_back(false);
        pendingMailboxMsgsReply.push_back(false);
        trajectoryControllers.push_back(NULL);
        int i = 0;
        bool b = false;
        upperLimit.push_back(i);
        lowerLimit.push_back(i);
        limitActive.push_back(b);
        jointLimitReached.push_back(b);
        inverseMovementDirection.push_back(b);
      }

    }
 

    if (nrOfSlaves > 0) {
      LOG(info) << nrOfSlaves << " EtherCAT slaves found" ;
    } else {
      throw std::runtime_error("No EtherCAT slave could be found");
      return;
    }

    stopThread = false;
    threads.create_thread(boost::bind(&EthercatMasterWithThread::updateSensorActorValues, this));

    SLEEP_MILLISEC(10); //needed to start up thread and EtherCAT communication

		this->ethercatConnectionEstablished = true;
    return;
!!!795377.cpp!!!	setJointLimits(in lowerJointLimit : int, in upperJointLimit : int, in inverseMovement : bool, in activateLimit : bool, in jointNumber : unsigned int) : void
    upperLimit[jointNumber - 1] = upperJointLimit;
    lowerLimit[jointNumber - 1] = lowerJointLimit;
    limitActive[jointNumber - 1] = activateLimit;
    inverseMovementDirection[jointNumber - 1] = inverseMovement;
  
!!!266865.cpp!!!	closeEthercat() : bool

	  this->ethercatConnectionEstablished = false;
   // Request safe operational state for all slaves
    ec_slave[0].state = EC_STATE_SAFE_OP;

    /* request SAFE_OP state for all slaves */
    ec_writestate(0);

    //stop SOEM, close socket
    ec_close();

    return true;
!!!267505.cpp!!!	setMsgBuffer(in msgBuffer : YouBotSlaveMsg, in jointNumber : uint) : void

    if (this->automaticSendOn == true) {
      if (newDataFlagOne == true) {
        {
          boost::mutex::scoped_lock dataMutex1(mutexDataOne);
          firstBufferVector[jointNumber - 1].stctOutput = msgBuffer.stctOutput;
          newOutputDataFlagOne[jointNumber - 1] = true;
          newOutputDataFlagTwo[jointNumber - 1] = false;
        }
      } else if (newDataFlagTwo == true) {
        {
          boost::mutex::scoped_lock dataMutex2(mutexDataTwo);
          secondBufferVector[jointNumber - 1].stctOutput = msgBuffer.stctOutput;
          newOutputDataFlagOne[jointNumber - 1] = false;
          newOutputDataFlagTwo[jointNumber - 1] = true;
        }

      } else {
        return;
      }
    } else {
      YouBotSlaveMsg localMsg;
      localMsg.stctOutput = msgBuffer.stctOutput;
      localMsg.jointNumber = jointNumber;
      automaticSendOffBufferVector.push_back(localMsg);
    }

!!!267633.cpp!!!	getMsgBuffer(in jointNumber : uint, out returnMsg : YouBotSlaveMsg) : void

    static bool lastValueof_newDataFlagOne;
    static bool lastValueof_newDataFlagTwo;

    
    if (this->automaticReceiveOn == true) {
      if (newDataFlagOne == true && lastValueof_newDataFlagOne == false) {
        {
          boost::mutex::scoped_lock dataMutex1(mutexDataOne);
          BufferForGetMsgBuffer = firstBufferVector;
        }
      } else if (newDataFlagTwo == true && lastValueof_newDataFlagTwo == false) {
        {
          boost::mutex::scoped_lock dataMutex2(mutexDataTwo);
          BufferForGetMsgBuffer = secondBufferVector;
        }
      } 
      
      returnMsg = BufferForGetMsgBuffer[jointNumber - 1];
      lastValueof_newDataFlagOne = newDataFlagOne;
      lastValueof_newDataFlagTwo = newDataFlagTwo;
    } else {
      returnMsg = this->automaticReceiveOffBufferVector[jointNumber - 1];
    }

!!!302449.cpp!!!	setMailboxMsgBuffer(in msgBuffer : YouBotSlaveMailboxMsg, in jointNumber : uint) : void

    if (newDataFlagOne == true) {
      {
        boost::mutex::scoped_lock dataMutex1(mutexDataOne);
        firstMailboxBufferVector[jointNumber - 1].stctOutput = msgBuffer.stctOutput;
        newMailboxDataFlagOne[jointNumber - 1] = true;
        newMailboxDataFlagTwo[jointNumber - 1] = false;
      }
    } else if (newDataFlagTwo == true) {
      {
        boost::mutex::scoped_lock dataMutex2(mutexDataTwo);
        secondMailboxBufferVector[jointNumber - 1].stctOutput = msgBuffer.stctOutput;
        newMailboxDataFlagOne[jointNumber - 1] = false;
        newMailboxDataFlagTwo[jointNumber - 1] = true;
      }

    }
    return;
!!!302577.cpp!!!	getMailboxMsgBuffer(out mailboxMsg : YouBotSlaveMailboxMsg, in jointNumber : uint) : bool


    if (newMailboxInputDataFlagOne[jointNumber - 1] == true) {
      {
        boost::mutex::scoped_lock dataMutex1(mutexDataOne);
        mailboxMsg.stctInput = firstMailboxBufferVector[jointNumber - 1].stctInput;
     //   mailboxMsg.stctOutput = firstMailboxBufferVector[jointNumber - 1].stctOutput;
        newMailboxInputDataFlagOne[jointNumber - 1] = false;
      }
      return true;
    } else if (newMailboxInputDataFlagTwo[jointNumber - 1] == true) {
      {
        boost::mutex::scoped_lock dataMutex2(mutexDataTwo);
        mailboxMsg.stctInput = secondMailboxBufferVector[jointNumber - 1].stctInput;
    //    mailboxMsg.stctOutput = secondMailboxBufferVector[jointNumber - 1].stctOutput;
        newMailboxInputDataFlagTwo[jointNumber - 1] = false;
      }
      return true;
    }
    return false;
!!!339825.cpp!!!	sendMailboxMessage(in mailboxMsg : YouBotSlaveMailboxMsg) : bool
    //  LOG(trace) << "send mailbox message (buffer two) slave " << mailboxMsg.getSlaveNo();
    mailboxBufferSend[0] = mailboxMsg.stctOutput.moduleAddress;
    mailboxBufferSend[1] = mailboxMsg.stctOutput.commandNumber;
    mailboxBufferSend[2] = mailboxMsg.stctOutput.typeNumber;
    mailboxBufferSend[3] = mailboxMsg.stctOutput.motorNumber;
    mailboxBufferSend[4] = mailboxMsg.stctOutput.value >> 24;
    mailboxBufferSend[5] = mailboxMsg.stctOutput.value >> 16;
    mailboxBufferSend[6] = mailboxMsg.stctOutput.value >> 8;
    mailboxBufferSend[7] = mailboxMsg.stctOutput.value & 0xff;
    if (ec_mbxsend(mailboxMsg.getSlaveNo(), &mailboxBufferSend, mailboxTimeout)) {
      return true;
    } else {
      return false;
    }
!!!339953.cpp!!!	receiveMailboxMessage(out mailboxMsg : YouBotSlaveMailboxMsg) : bool
    if (ec_mbxreceive(mailboxMsg.getSlaveNo(), &mailboxBufferReceive, mailboxTimeout)) {
      //    LOG(trace) << "received mailbox message (buffer two) slave " << mailboxMsg.getSlaveNo();
      mailboxMsg.stctInput.replyAddress = (int) mailboxBufferReceive[0];
      mailboxMsg.stctInput.moduleAddress = (int) mailboxBufferReceive[1];
      mailboxMsg.stctInput.status = (int) mailboxBufferReceive[2];
      mailboxMsg.stctInput.commandNumber = (int) mailboxBufferReceive[3];
      mailboxMsg.stctInput.value = (mailboxBufferReceive[4] << 24 | mailboxBufferReceive[5] << 16 | mailboxBufferReceive[6] << 8 | mailboxBufferReceive[7]);
      return true;
    }
    return false;
!!!802033.cpp!!!	checkJointLimits() : void
    SlaveMessageOutput* jointMsgOut;
    SlaveMessageInput* jointMsgIN;

    for (unsigned int jointNo = 0; jointNo < firstBufferVector.size(); jointNo++) {
      jointMsgOut = ethercatOutputBufferVector[jointNo];
      jointMsgIN = ethercatInputBufferVector[jointNo];

      //check if for joint limits
      bool limitReached = false;
      bool reachedUpperLimit = false;
      bool reachedLowerLimit = false;

      if (limitActive[jointNo]) {

        if (jointMsgIN->actualPosition > upperLimit[jointNo]) {
          reachedUpperLimit = true;
        }
        if (jointMsgIN->actualPosition < lowerLimit[jointNo]) {
          reachedLowerLimit = true;
        }

        if (reachedUpperLimit || reachedLowerLimit) {

          limitReached = true;

          switch (jointMsgOut->controllerMode) {
            case POSITION_CONTROL:
              if (!(jointMsgOut->value < upperLimit[jointNo] && jointMsgOut->value > lowerLimit[jointNo])) {
                limitReached = true;
              } else {
                limitReached = false;
              }
              break;
            case VELOCITY_CONTROL:
            case PWM_MODE:
            case CURRENT_MODE:
              if ((jointMsgOut->value >= 0 && reachedUpperLimit) || (jointMsgOut->value <= 0 && reachedLowerLimit)) {
                limitReached = true;
              } else {
                limitReached = false;
              }
              break;
            default:
              limitReached = true;
              break;

          }
        }

        if (limitReached == true) {

          jointMsgOut->controllerMode = PWM_MODE;
          jointMsgOut->value = 0;
      //    LOG(info) << "limit reached Joint " << jointNo + 1;

          if (jointLimitReached[jointNo] == false) {
            LOG(error) << "Joint " << jointNo + 1 << " exceeded the joint limit! Upper limit: " << upperLimit[jointNo] << " lower limit: " << lowerLimit[jointNo] << " position: " << jointMsgIN->actualPosition;
            //       throw std::runtime_error(ss.str());
            jointLimitReached[jointNo] = true;
          }
        } else {
          if (jointLimitReached[jointNo] == true){
            LOG(info) << "Joint " << jointNo + 1 << " is not in the limit any more";
          }
          jointLimitReached[jointNo] = false;

        }
      }
    }
!!!259953.cpp!!!	updateSensorActorValues() : void

    long timeToWait = 0;
    boost::posix_time::ptime startTime = boost::posix_time::microsec_clock::local_time();
    boost::posix_time::time_duration pastTime;
  //  int counter = 0;
    boost::posix_time::time_duration realperiode;
    boost::posix_time::time_duration timeSum = startTime - startTime;
    SlaveMessageOutput trajectoryContollerOutput;


    while (!stopThread) {

      pastTime = boost::posix_time::microsec_clock::local_time() - startTime;
      timeToWait = timeTillNextEthercatUpdate - pastTime.total_microseconds() - 100;
      
      if(timeToWait < 0 || timeToWait > (int)timeTillNextEthercatUpdate){
    //    printf("Missed communication period of %d  microseconds it have been %d microseconds \n",timeTillNextEthercatUpdate, (int)pastTime.total_microseconds()+ 100);
      }else{
        boost::this_thread::sleep(boost::posix_time::microseconds(timeToWait));
      }

     // realperiode = boost::posix_time::microsec_clock::local_time() - startTime;
      startTime = boost::posix_time::microsec_clock::local_time();

/*
      counter++;
      timeSum  = timeSum + realperiode;

      if(counter == 1000){

        double dtotaltime = (double)timeSum.total_microseconds()/counter;
        printf("TotalTime %7.0lf us\n", dtotaltime);
        counter = 0;
        timeSum = startTime - startTime;
      }
*/

      //check if for joint limits
    //  this->checkJointLimits();  //TODO test joint limit check
      
      //send and receive data from ethercat
      if (ec_send_processdata() == 0) {
        LOG(warning) << "Sending process data failed";
      }

      if (ec_receive_processdata(this->ethercatTimeout) == 0) {
        if(communicationErrors == 0){
          LOG(warning) << "Receiving data failed";
        }
        communicationErrors++;
      }else{
        communicationErrors = 0;
      }
      
      if(communicationErrors > maxCommunicationErrors){
        LOG(error) << "Lost EtherCAT connection";
        this->closeEthercat();
        stopThread = true;
        break;
      }
      
      if (ec_iserror())
        LOG(warning) << "there is an error in the soem driver";
      
      

      if (newDataFlagOne == false) {
        {
          boost::mutex::scoped_lock dataMutex1(mutexDataOne);
          for (unsigned int i = 0; i < nrOfSlaves; i++) {
            
            //fill first output buffer (send data)
            if (newOutputDataFlagOne[i]) {
              *(ethercatOutputBufferVector[i]) = (firstBufferVector[i]).stctOutput;
              newOutputDataFlagOne[i] = false;
            }
           
            //fill first input buffer (receive data)
            (firstBufferVector[i]).stctInput = *(ethercatInputBufferVector[i]);
            
              
           // this->parseYouBotErrorFlags(secondBufferVector[i]);

            //send mailbox messages from first buffer
            if (newMailboxDataFlagOne[i]) {
              sendMailboxMessage(firstMailboxBufferVector[i]);
              newMailboxDataFlagOne[i] = false;
              pendingMailboxMsgsReply[i] = true;
            }
            
            //receive mailbox messages to first buffer
            if(pendingMailboxMsgsReply[i]){
              if (receiveMailboxMessage(firstMailboxBufferVector[i])) {
                newMailboxInputDataFlagOne[i] = true;
                pendingMailboxMsgsReply[i] = false;
              }
            }
          }
        }
        newDataFlagOne = true;
        newDataFlagTwo = false;

      } else if (newDataFlagTwo == false) {
        {
          boost::mutex::scoped_lock dataMutex2(mutexDataTwo);
          for (unsigned int i = 0; i < nrOfSlaves; i++) {
            
            //fill second output buffer (send data)
            if (newOutputDataFlagTwo[i]) {
              *(ethercatOutputBufferVector[i]) = (secondBufferVector[i]).stctOutput;
              newOutputDataFlagTwo[i] = false;
            }
            //fill second input buffer (receive data)
            (secondBufferVector[i]).stctInput = *(ethercatInputBufferVector[i]);
            
           // this->parseYouBotErrorFlags(secondBufferVector[i]);

            //send mailbox messages from second buffer
            if (newMailboxDataFlagTwo[i]) {
              sendMailboxMessage(secondMailboxBufferVector[i]);
              newMailboxDataFlagTwo[i] = false;
              pendingMailboxMsgsReply[i] = true;
            }
             
            //receive mailbox messages to second buffer
            if(pendingMailboxMsgsReply[i]){
              if (receiveMailboxMessage(secondMailboxBufferVector[i])) {
                newMailboxInputDataFlagTwo[i] = true;
                pendingMailboxMsgsReply[i] = false;
              }
            }
          }
        }
        newDataFlagTwo = true;
        newDataFlagOne = false;
      }

			{
				boost::mutex::scoped_lock trajectoryControllerMutex(trajectoryControllerVectorMutex);
				for (unsigned int i = 0; i < nrOfSlaves; i++) {
					if (this->trajectoryControllers[i] != NULL) {
						if (this->trajectoryControllers[i]->updateTrajectoryController(*(ethercatInputBufferVector[i]), trajectoryContollerOutput)) {
							//   printf("send vel slave: %d", i);
							(*(ethercatOutputBufferVector[i])).controllerMode = trajectoryContollerOutput.controllerMode;
							(*(ethercatOutputBufferVector[i])).value = trajectoryContollerOutput.value;

							/*
							else {
								(*(ethercatOutputBufferVector[i])).controllerMode = VELOCITY_CONTROL;
								(*(ethercatOutputBufferVector[i])).value = 0.0;
							}*/

							if (newDataFlagOne == true) {
								{
									boost::mutex::scoped_lock dataMutex1(mutexDataOne);
									//fill first output buffer
									(firstBufferVector[i]).stctOutput = *(ethercatOutputBufferVector[i]);
								}
							} else if (newDataFlagTwo == true) {
								{
									boost::mutex::scoped_lock dataMutex2(mutexDataTwo);
									//fill second output buffer
									(secondBufferVector[i]).stctOutput = *(ethercatOutputBufferVector[i]);
								}
							}
						}
					}
				}
			}
      

      
     // if(ethercatInputBufferVector[3]->actualCurrent >= 900 ){
     //   printf("joint 3 encoder: %d current %d \n", ethercatInputBufferVector[3]->actualPosition, ethercatInputBufferVector[3]->actualCurrent);
     // }
      // int cnt = 7;
      //  printf("activeports:%i DCrtA:%i DCrtB:%d DCrtC:%d DCrtD:%d\n", (int)ec_slave[cnt].activeports, ec_slave[cnt].DCrtA, ec_slave[cnt].DCrtB, ec_slave[cnt].DCrtC, ec_slave[cnt].DCrtD);
      //  printf("next DC slave:%i previous DC slave:%i DC cyle time in ns:%d DC shift:%d DC sync activation:%d\n", ec_slave[cnt].DCnext, ec_slave[cnt].DCprevious, ec_slave[cnt].DCcycle, ec_slave[cnt].DCshift, ec_slave[cnt].DCactive);

//      for (unsigned int i = 0; i < motorProtections.size(); i++) {
//        if (motorProtections[i].createSafeMotorCommands(stopMotorCommand)) {
//          *(ethercatOutputBufferVector[i]) = stopMotorCommand.stctOutput;
//        }
//      }
    }
!!!695921.cpp!!!	parseYouBotErrorFlags(in messageBuffer : YouBotSlaveMsg) : void
    std::stringstream errorMessageStream;
    errorMessageStream <<  " " ;
    std::string errorMessage;
    errorMessage = errorMessageStream.str();


    if (messageBuffer.stctInput.errorFlags & OVER_CURRENT) {
      LOG(error) << errorMessage << "got over current";
      //    throw JointErrorException(errorMessage + "got over current");
    }

    if (messageBuffer.stctInput.errorFlags & UNDER_VOLTAGE) {
      LOG(error) << errorMessage << "got under voltage";
      //    throw JointErrorException(errorMessage + "got under voltage");
    }

    if (messageBuffer.stctInput.errorFlags & OVER_VOLTAGE) {
      LOG(error) << errorMessage << "got over voltage";
      //   throw JointErrorException(errorMessage + "got over voltage");
    }

    if (messageBuffer.stctInput.errorFlags & OVER_TEMPERATURE) {
      LOG(error) << errorMessage << "got over temperature";
      //   throw JointErrorException(errorMessage + "got over temperature");
    }

    if (messageBuffer.stctInput.errorFlags & MOTOR_HALTED) {
      //   LOG(info) << errorMessage << "is halted";
      //   throw JointErrorException(errorMessage + "is halted");
    }

    if (messageBuffer.stctInput.errorFlags & HALL_SENSOR_ERROR) {
      LOG(error) << errorMessage << "got hall sensor problem";
      //   throw JointErrorException(errorMessage + "got hall sensor problem");
    }

//    if (messageBuffer.stctInput.errorFlags & ENCODER_ERROR) {
//      LOG(error) << errorMessage << "got encoder problem";
//      //   throw JointErrorException(errorMessage + "got encoder problem");
//    }
//
//     if (messageBuffer.stctInput.errorFlags & INITIALIZATION_ERROR) {
//      LOG(error) << errorMessage << "got inizialization problem";
//      //   throw JointErrorException(errorMessage + "got motor winding problem");
//    }

    if (messageBuffer.stctInput.errorFlags & PWM_MODE_ACTIVE) {
    //  LOG(error) << errorMessage << "has PWM mode active";
      //   throw JointErrorException(errorMessage + "the cycle time is violated");
    }

    if (messageBuffer.stctInput.errorFlags & VELOCITY_MODE) {
   //   LOG(info) << errorMessage << "has velocity mode active";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (messageBuffer.stctInput.errorFlags & POSITION_MODE) {
   //   LOG(info) << errorMessage << "has position mode active";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (messageBuffer.stctInput.errorFlags & TORQUE_MODE) {
   //   LOG(info) << errorMessage << "has torque mode active";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

//    if (messageBuffer.stctInput.errorFlags & EMERGENCY_STOP) {
//      LOG(info) << errorMessage << "has emergency stop active";
//      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
//    }
//
//    if (messageBuffer.stctInput.errorFlags & FREERUNNING) {
//   //   LOG(info) << errorMessage << "has freerunning active";
//      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
//    }

    if (messageBuffer.stctInput.errorFlags & POSITION_REACHED) {
  //    LOG(info) << errorMessage << "has position reached";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (messageBuffer.stctInput.errorFlags & INITIALIZED) {
    //  LOG(info) << errorMessage << "is initialized";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (messageBuffer.stctInput.errorFlags & TIMEOUT) {
      LOG(error) << errorMessage << "has a timeout";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (messageBuffer.stctInput.errorFlags & I2T_EXCEEDED) {
      LOG(error) << errorMessage << "exceeded I2t";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

