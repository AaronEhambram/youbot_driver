class YouBotBase
!!!425585.cpp!!!	YouBotBase(in name : string, in configFilePath : string = "../config/")

    this->controllerType = 174;
    this->minFirmwareVersion = 1.43;

    string filename;
    filename = name;
    filename.append(".cfg");
    configfile == NULL;
    configfile = new ConfigFile(filename, configFilePath);
    
    this->initializeJoints();

    this->initializeKinematic();

!!!425713.cpp!!!	~YouBotBase()
    if (configfile != NULL)
      delete configfile;
!!!567793.cpp!!!	doJointCommutation() : void

    InitializeJoint doInitialization;
    bool isInitialized = false;
    int noInitialization = 0;

    ClearMotorControllerTimeoutFlag clearTimeoutFlag;
    this->getBaseJoint(1).setConfigurationParameter(clearTimeoutFlag);
    this->getBaseJoint(2).setConfigurationParameter(clearTimeoutFlag);
    this->getBaseJoint(3).setConfigurationParameter(clearTimeoutFlag);
    this->getBaseJoint(4).setConfigurationParameter(clearTimeoutFlag);

    #ifdef ETHERCAT_MASTER_WITHOUT_THREAD
      ethercatMaster.sendProcessData();
      ethercatMaster.receiveProcessData();
    #endif

    doInitialization.setParameter(false);
    this->getBaseJoint(1).getConfigurationParameter(doInitialization);
    doInitialization.getParameter(isInitialized);
    if (!isInitialized) {
      noInitialization++;
    }

    doInitialization.setParameter(false);
    this->getBaseJoint(2).getConfigurationParameter(doInitialization);
    doInitialization.getParameter(isInitialized);
    if (!isInitialized) {
      noInitialization++;
    }

    doInitialization.setParameter(false);
    this->getBaseJoint(3).getConfigurationParameter(doInitialization);
    doInitialization.getParameter(isInitialized);
    if (!isInitialized) {
      noInitialization++;
    }

    doInitialization.setParameter(false);
    this->getBaseJoint(4).getConfigurationParameter(doInitialization);
    doInitialization.getParameter(isInitialized);
    if (!isInitialized) {
      noInitialization++;
    }

    if (noInitialization != 0) {
      doInitialization.setParameter(true);
      LOG(info) << "Base Joint Commutation";

      ethercatMaster.AutomaticReceiveOn(false);
      this->getBaseJoint(1).setConfigurationParameter(doInitialization);
      this->getBaseJoint(2).setConfigurationParameter(doInitialization);
      this->getBaseJoint(3).setConfigurationParameter(doInitialization);
      this->getBaseJoint(4).setConfigurationParameter(doInitialization);
      ethercatMaster.AutomaticReceiveOn(true);

      unsigned int statusFlags;
      std::vector<bool> isCommutated;
      isCommutated.assign(BASEJOINTS, false);
      unsigned int u = 0;

      // check for the next 5 sec if the joints are commutated
      for (u = 1; u <= 5000; u++) {
        for (unsigned int i = 1; i <= BASEJOINTS; i++) {
          #ifdef ETHERCAT_MASTER_WITHOUT_THREAD
            ethercatMaster.sendProcessData();
            ethercatMaster.receiveProcessData();
          #endif
          this->getBaseJoint(i).getStatus(statusFlags);
          if (statusFlags & INITIALIZED) {
            isCommutated[i - 1] = true;
          }
        }
        if (isCommutated[0] && isCommutated[1] && isCommutated[2] && isCommutated[3]) {
          break;
        }
        SLEEP_MILLISEC(1);
      }


      SLEEP_MILLISEC(10); // the controller likes it
      std::string jointName;

      for (unsigned int i = 1; i <= BASEJOINTS; i++) {
        doInitialization.setParameter(false);
        this->getBaseJoint(i).getConfigurationParameter(doInitialization);
        doInitialization.getParameter(isInitialized);
        if (!isInitialized) {
          std::stringstream jointNameStream;
          jointNameStream << "joint " << i;
          jointName = jointNameStream.str();
          throw std::runtime_error("Could not commutate base " + jointName);
        }
      }
    }
!!!325489.cpp!!!	getBaseJoint(in baseJointNumber : uint) : YouBotJoint&
    if (baseJointNumber <= 0 || baseJointNumber > BASEJOINTS) {
      throw std::out_of_range("Invalid Joint Number");
    }
    return joints[baseJointNumber - 1];
!!!333041.cpp!!!	getBasePosition(out longitudinalPosition : quantity<si::length>, out transversalPosition : quantity<si::length>, out orientation : quantity<plane_angle>) : void

    std::vector<quantity<plane_angle> > wheelPositions;
    quantity<plane_angle> dummy;
    JointSensedAngle sensedPos;
    wheelPositions.assign(BASEJOINTS, dummy);

    joints[0].getData(sensedPos);
    wheelPositions[0] = sensedPos.angle;
    joints[1].getData(sensedPos);
    wheelPositions[1] = sensedPos.angle;
    joints[2].getData(sensedPos);
    wheelPositions[2] = sensedPos.angle;
    joints[3].getData(sensedPos);
    wheelPositions[3] = sensedPos.angle;

    youBotBaseKinematic.wheelPositionsToCartesianPosition(wheelPositions, longitudinalPosition, transversalPosition, orientation);
!!!788849.cpp!!!	setBasePosition(in longitudinalPosition : quantity<si::length>, in transversalPosition : quantity<si::length>, in orientation : quantity<plane_angle>) : void

    std::vector<quantity<plane_angle> > wheelPositions;
    quantity<plane_angle> dummy;
    JointAngleSetpoint setpointPos;
    wheelPositions.assign(BASEJOINTS, dummy);
    JointSensedAngle sensedPos;

    youBotBaseKinematic.cartesianPositionToWheelPositions(longitudinalPosition, transversalPosition, orientation, wheelPositions);
    
    if (wheelPositions.size() < BASEJOINTS)
      throw std::out_of_range("To less wheel velocities");
    
    joints[0].setEncoderToZero();
    joints[1].setEncoderToZero();
    joints[2].setEncoderToZero();
    joints[3].setEncoderToZero();
    SLEEP_MILLISEC(10);

    ethercatMaster.AutomaticSendOn(false);
    joints[0].getData(sensedPos);
    setpointPos.angle = sensedPos.angle + wheelPositions[0];
    joints[0].setData(setpointPos, NON_BLOCKING);
    
    joints[1].getData(sensedPos);
    setpointPos.angle = sensedPos.angle + wheelPositions[1];
    joints[1].setData(setpointPos, NON_BLOCKING);
    
    joints[2].getData(sensedPos);
    setpointPos.angle = sensedPos.angle + wheelPositions[2];
    joints[2].setData(setpointPos, NON_BLOCKING);
    
    joints[3].getData(sensedPos);
    setpointPos.angle = sensedPos.angle + wheelPositions[3];
    joints[3].setData(setpointPos, NON_BLOCKING);
    ethercatMaster.AutomaticSendOn(true);

!!!332401.cpp!!!	getBaseVelocity(out longitudinalVelocity : quantity<si::velocity>, out transversalVelocity : quantity<si::velocity>, out angularVelocity : quantity<si::angular_velocity>) : void

    std::vector<quantity<angular_velocity> > wheelVelocities;
    quantity<angular_velocity> dummy;
    JointSensedVelocity sensedVel;
    wheelVelocities.assign(BASEJOINTS, dummy);

    joints[0].getData(sensedVel);
    wheelVelocities[0] = sensedVel.angularVelocity;
    joints[1].getData(sensedVel);
    wheelVelocities[1] = sensedVel.angularVelocity;
    joints[2].getData(sensedVel);
    wheelVelocities[2] = sensedVel.angularVelocity;
    joints[3].getData(sensedVel);
    wheelVelocities[3] = sensedVel.angularVelocity;

    youBotBaseKinematic.wheelVelocitiesToCartesianVelocity(wheelVelocities, longitudinalVelocity, transversalVelocity, angularVelocity);

!!!318833.cpp!!!	setBaseVelocity(in longitudinalVelocity : quantity<si::velocity>, in transversalVelocity : quantity<si::velocity>, in angularVelocity : quantity<si::angular_velocity>) : void

    std::vector<quantity<angular_velocity> > wheelVelocities;
    JointVelocitySetpoint setVel;

    youBotBaseKinematic.cartesianVelocityToWheelVelocities(longitudinalVelocity, transversalVelocity, angularVelocity, wheelVelocities);

    if (wheelVelocities.size() < BASEJOINTS)
      throw std::out_of_range("To less wheel velocities");

    ethercatMaster.AutomaticSendOn(false);
    setVel.angularVelocity = wheelVelocities[0];
    joints[0].setData(setVel, NON_BLOCKING);
    setVel.angularVelocity = wheelVelocities[1];
    joints[1].setData(setVel, NON_BLOCKING);
    setVel.angularVelocity = wheelVelocities[2];
    joints[2].setData(setVel, NON_BLOCKING);
    setVel.angularVelocity = wheelVelocities[3];
    joints[3].setData(setVel, NON_BLOCKING);
    ethercatMaster.AutomaticSendOn(true);
!!!588273.cpp!!!	setJointData(in JointData : std::vector<JointAngleSetpoint>) : void
    if (JointData.size() != BASEJOINTS)
      throw std::out_of_range("Wrong number of JointAngleSetpoints");

    ethercatMaster.AutomaticSendOn(false);
    joints[0].setData(JointData[0], NON_BLOCKING);
    joints[1].setData(JointData[1], NON_BLOCKING);
    joints[2].setData(JointData[2], NON_BLOCKING);
    joints[3].setData(JointData[3], NON_BLOCKING);
    ethercatMaster.AutomaticSendOn(true);

!!!588785.cpp!!!	getJointData(out data : std::vector<JointSensedAngle>) : void
    data.resize(BASEJOINTS);
    ethercatMaster.AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    ethercatMaster.AutomaticReceiveOn(true);
!!!588401.cpp!!!	setJointData(in JointData : std::vector<JointVelocitySetpoint>) : void
    if (JointData.size() != BASEJOINTS)
      throw std::out_of_range("Wrong number of JointVelocitySetpoints");

    ethercatMaster.AutomaticSendOn(false);
    joints[0].setData(JointData[0], NON_BLOCKING);
    joints[1].setData(JointData[1], NON_BLOCKING);
    joints[2].setData(JointData[2], NON_BLOCKING);
    joints[3].setData(JointData[3], NON_BLOCKING);
    ethercatMaster.AutomaticSendOn(true);
!!!588913.cpp!!!	getJointData(out data : std::vector<JointSensedVelocity>) : void
    data.resize(BASEJOINTS);
    ethercatMaster.AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    ethercatMaster.AutomaticReceiveOn(true);
!!!843761.cpp!!!	setJointData(in JointData : std::vector<JointCurrentSetpoint>) : void
    if (JointData.size() != BASEJOINTS)
      throw std::out_of_range("Wrong number of JointCurrentSetpoint");

    ethercatMaster.AutomaticSendOn(false);
    joints[0].setData(JointData[0], NON_BLOCKING);
    joints[1].setData(JointData[1], NON_BLOCKING);
    joints[2].setData(JointData[2], NON_BLOCKING);
    joints[3].setData(JointData[3], NON_BLOCKING);
    ethercatMaster.AutomaticSendOn(true);
!!!589169.cpp!!!	getJointData(out data : std::vector<JointSensedCurrent>) : void
    data.resize(BASEJOINTS);
    ethercatMaster.AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    ethercatMaster.AutomaticReceiveOn(true);
!!!843889.cpp!!!	setJointData(in JointData : std::vector<JointTorqueSetpoint>) : void
    if (JointData.size() != BASEJOINTS)
      throw std::out_of_range("Wrong number of JointTorqueSetpoint");

    ethercatMaster.AutomaticSendOn(false);
    joints[0].setData(JointData[0], NON_BLOCKING);
    joints[1].setData(JointData[1], NON_BLOCKING);
    joints[2].setData(JointData[2], NON_BLOCKING);
    joints[3].setData(JointData[3], NON_BLOCKING);
    ethercatMaster.AutomaticSendOn(true);
!!!844017.cpp!!!	getJointData(out data : std::vector<JointSensedTorque>) : void
    data.resize(BASEJOINTS);
    ethercatMaster.AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    ethercatMaster.AutomaticReceiveOn(true);
!!!682353.cpp!!!	areSame(in A : double, in B : double) : bool
    return std::fabs(A - B) < 0.0001;
!!!287985.cpp!!!	initializeJoints() : void

    LOG(trace) << "Initializing Joints";

    //get number of slaves
    unsigned int noSlaves = ethercatMaster.getNumberOfSlaves();

    if (noSlaves < BASEJOINTS) {
      throw std::out_of_range("Not enough ethercat slaves were found to create a YouBotBase!");
    }

    //read Joint Topology from config file
    //  configfile.setSection("JointTopology");

    //check if enough slave exist to create YouBotJoint for the slave numbers from config file
    //if enough slave exist create YouBotJoint and store it in the joints vector
    unsigned int slaveNumber = 0;
    configfile->readInto(slaveNumber, "JointTopology", "BaseLeftFront");
    if (slaveNumber <= noSlaves) {
      joints.push_back(YouBotJoint(slaveNumber));
    } else {
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber, "JointTopology", "BaseRightFront");
    if (slaveNumber <= noSlaves) {
      joints.push_back(YouBotJoint(slaveNumber));
    } else {
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber, "JointTopology", "BaseLeftBack");
    if (slaveNumber <= noSlaves) {
      joints.push_back(YouBotJoint(slaveNumber));
    } else {
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber, "JointTopology", "BaseRightBack");
    if (slaveNumber <= noSlaves) {
      joints.push_back(YouBotJoint(slaveNumber));
    } else {
      throw std::out_of_range("The ethercat slave number is not available!");
    }


    //Configure Joint Parameters
    std::string jointName;
    JointName jName;
    GearRatio gearRatio;
    EncoderTicksPerRound ticksPerRound;
    InverseMovementDirection inverseDir;
    FirmwareVersion firmwareTypeVersion;
    TorqueConstant torqueConst;

    double gearRatio_numerator = 0;
    double gearRatio_denominator = 1;
    JointLimits jLimits;

    for (unsigned int i = 0; i < BASEJOINTS; i++) {
      std::stringstream jointNameStream;
      jointNameStream << "Joint_" << i + 1;
      jointName = jointNameStream.str();
      //  configfile.setSection(jointName.c_str());

      joints[i].getConfigurationParameter(firmwareTypeVersion);
      std::string version;
      int controllerType;
      double firmwareVersion;
      firmwareTypeVersion.getParameter(controllerType, firmwareVersion);

      string name;
      configfile->readInto(name, jointName, "JointName");
      jName.setParameter(name);

      LOG(info) << name << "\t Controller Type: " << controllerType << "  Firmware version: " << firmwareVersion;

      if (this->controllerType != controllerType) {
        std::stringstream ss;
        ss << "The youBot base motor controller have to be of type: " << this->controllerType;
        throw std::runtime_error(ss.str().c_str());
      }

      if (!areSame(firmwareVersion, this->minFirmwareVersion)) {
        if (firmwareVersion < this->minFirmwareVersion) {
          std::stringstream ss;
          ss << "The motor controller firmware version have be " << this->minFirmwareVersion << " or higher.";
          throw std::runtime_error(ss.str().c_str());
        }
      }


      configfile->readInto(gearRatio_numerator, jointName, "GearRatio_numerator");
      configfile->readInto(gearRatio_denominator, jointName, "GearRatio_denominator");
      gearRatio.setParameter(gearRatio_numerator / gearRatio_denominator);
      int ticks;
      configfile->readInto(ticks, jointName, "EncoderTicksPerRound");
      ticksPerRound.setParameter(ticks);
      
      double torqueConstant;
      configfile->readInto(torqueConstant, jointName, "TorqueConstant_[newton_meter_divided_by_ampere]");
      torqueConst.setParameter(torqueConstant);
      
      bool invdir = false;
      configfile->readInto(invdir, jointName, "InverseMovementDirection");
      inverseDir.setParameter(invdir);

      joints[i].setConfigurationParameter(jName);
      joints[i].setConfigurationParameter(gearRatio);
      joints[i].setConfigurationParameter(ticksPerRound);
      joints[i].setConfigurationParameter(torqueConst);
      joints[i].setConfigurationParameter(inverseDir);
   
      long upperlimit = 0, lowerlimit = 0;
      configfile->readInto(lowerlimit, jointName, "LowerLimit_[encoderTicks]");
      configfile->readInto(upperlimit, jointName, "UpperLimit_[encoderTicks]");

      jLimits.setParameter(lowerlimit, upperlimit, false);
      joints[i].setConfigurationParameter(jLimits);
    }

    return;
!!!318961.cpp!!!	initializeKinematic() : void
    FourSwedishWheelOmniBaseKinematicConfiguration kinematicConfig;

    //read the kinematics parameter from a config file
    configfile->readInto(kinematicConfig.rotationRatio, "YouBotKinematic", "RotationRatio");
    configfile->readInto(kinematicConfig.slideRatio, "YouBotKinematic", "SlideRatio");
    double dummy = 0;
    configfile->readInto(dummy, "YouBotKinematic", "LengthBetweenFrontAndRearWheels_[meter]");
    kinematicConfig.lengthBetweenFrontAndRearWheels = dummy * meter;
    configfile->readInto(dummy, "YouBotKinematic", "LengthBetweenFrontWheels_[meter]");
    kinematicConfig.lengthBetweenFrontWheels = dummy * meter;
    configfile->readInto(dummy, "YouBotKinematic", "WheelRadius_[meter]");
    kinematicConfig.wheelRadius = dummy * meter;


    youBotBaseKinematic.setConfiguration(kinematicConfig);
