class YouBotBase
!!!425585.cpp!!!	YouBotBase(in name : string, in configFilePath : string = "../config/")

    this->controllerType = 174;
    this->minFirmwareVersion = 1.43;
    
    string filename;
    filename = name;
    filename.append(".cfg");
    configfile == NULL;

    this->configFilePath = configFilePath;
    this->ethercatConfigFileName = "youbot-ethercat.cfg";

    configfile = new ConfigFile(filename, configFilePath);

    this->initializeJoints();

    this->initializeKinematic();

  //  this->doJointCommutation();

!!!425713.cpp!!!	~YouBotBase()
    if (configfile != NULL)
      delete configfile;
!!!567793.cpp!!!	doJointCommutation() : void
    
    InitializeJoint doInitialization;
    bool isInitialized = false;
    int noInitialization = 0;

    ClearMotorControllerTimeoutFlag clearTimeoutFlag;
    this->getBaseJoint(1).setConfigurationParameter(clearTimeoutFlag);
    this->getBaseJoint(2).setConfigurationParameter(clearTimeoutFlag);
    this->getBaseJoint(3).setConfigurationParameter(clearTimeoutFlag);
    this->getBaseJoint(4).setConfigurationParameter(clearTimeoutFlag);

    
    doInitialization.setParameter(false);
    this->getBaseJoint(1).getConfigurationParameter(doInitialization);
    doInitialization.getParameter(isInitialized);
    if(!isInitialized){
      noInitialization++;
    }

    doInitialization.setParameter(false);
    this->getBaseJoint(2).getConfigurationParameter(doInitialization);
    doInitialization.getParameter(isInitialized);
    if(!isInitialized){
      noInitialization++;
    }

    doInitialization.setParameter(false);
    this->getBaseJoint(3).getConfigurationParameter(doInitialization);
    doInitialization.getParameter(isInitialized);
    if(!isInitialized){
      noInitialization++;
    }

    doInitialization.setParameter(false);
    this->getBaseJoint(4).getConfigurationParameter(doInitialization);
    doInitialization.getParameter(isInitialized);
    if(!isInitialized){
      noInitialization++;
    }

    if(noInitialization != 0){
      doInitialization.setParameter(true);
      LOG(info) << "Base Joint Commutation";

      EthercatMaster::getInstance().AutomaticReceiveOn(false);
      this->getBaseJoint(1).setConfigurationParameter(doInitialization);
      this->getBaseJoint(2).setConfigurationParameter(doInitialization);
      this->getBaseJoint(3).setConfigurationParameter(doInitialization);
      this->getBaseJoint(4).setConfigurationParameter(doInitialization);
      EthercatMaster::getInstance().AutomaticReceiveOn(true);

      SLEEP_MILLISEC(4000);
    }
    
    std::string jointName;
    
    for (unsigned int i = 1; i <= BASEJOINTS; i++) {
      doInitialization.setParameter(false);
      this->getBaseJoint(i).getConfigurationParameter(doInitialization);
      doInitialization.getParameter(isInitialized);
        if(!isInitialized){
          std::stringstream jointNameStream;
          jointNameStream << "Joint " << i;
          jointName = jointNameStream.str();
          throw std::runtime_error("could not commutation " + jointName);
        }
      }
/*
    SLEEP_MILLISEC(2500);
    quantity<si::velocity> longitudinalVelocity = 0.0 * meter_per_second;
    quantity<si::velocity> transversalVelocity = 0.0 * meter_per_second;
    quantity<si::angular_velocity> angularVelocity = 0.1 * radian_per_second;

    this->setBaseVelocity(longitudinalVelocity, transversalVelocity, angularVelocity);
    SLEEP_MILLISEC(500);
    angularVelocity = 0 * radian_per_second;
    this->setBaseVelocity(longitudinalVelocity, transversalVelocity, angularVelocity);
    */
!!!325489.cpp!!!	getBaseJoint(in baseJointNumber : uint) : YouBotJoint&
    if (baseJointNumber <= 0 || baseJointNumber > BASEJOINTS) {
      throw std::out_of_range("Invalid Joint Number");
    }
    return joints[baseJointNumber - 1];
!!!333041.cpp!!!	getBasePosition(out longitudinalPosition : quantity<si::length>, out transversalPosition : quantity<si::length>, out orientation : quantity<plane_angle>) : void

    std::vector<quantity<plane_angle> > wheelPositions;
    quantity<plane_angle> dummy;
    JointSensedAngle sensedPos;
    wheelPositions.assign(BASEJOINTS, dummy);

    joints[0].getData(sensedPos);
    wheelPositions[0] = sensedPos.angle;
    joints[1].getData(sensedPos);
    wheelPositions[1] = sensedPos.angle;
    joints[2].getData(sensedPos);
    wheelPositions[2] = sensedPos.angle;
    joints[3].getData(sensedPos);
    wheelPositions[3] = sensedPos.angle;

    youBotBaseKinematic.wheelPositionsToCartesianPosition(wheelPositions, longitudinalPosition, transversalPosition, orientation);
!!!332401.cpp!!!	getBaseVelocity(out longitudinalVelocity : quantity<si::velocity>, out transversalVelocity : quantity<si::velocity>, out angularVelocity : quantity<si::angular_velocity>) : void

    std::vector<quantity<angular_velocity> > wheelVelocities;
    quantity<angular_velocity> dummy;
    JointSensedVelocity sensedVel;
    wheelVelocities.assign(BASEJOINTS, dummy);

    joints[0].getData(sensedVel);
    wheelVelocities[0] = sensedVel.angularVelocity;
    joints[1].getData(sensedVel);
    wheelVelocities[1] = sensedVel.angularVelocity;
    joints[2].getData(sensedVel);
    wheelVelocities[2] = sensedVel.angularVelocity;
    joints[3].getData(sensedVel);
    wheelVelocities[3] = sensedVel.angularVelocity;

    youBotBaseKinematic.wheelVelocitiesToCartesianVelocity(wheelVelocities, longitudinalVelocity, transversalVelocity, angularVelocity);

!!!318833.cpp!!!	setBaseVelocity(in longitudinalVelocity : quantity<si::velocity>, in transversalVelocity : quantity<si::velocity>, in angularVelocity : quantity<si::angular_velocity>) : void

    std::vector<quantity<angular_velocity> > wheelVelocities;
    JointVelocitySetpoint setVel;

    youBotBaseKinematic.cartesianVelocityToWheelVelocities(longitudinalVelocity, transversalVelocity, angularVelocity, wheelVelocities);

    if (wheelVelocities.size() < BASEJOINTS)
      throw std::out_of_range("To less wheel velocities");

    EthercatMaster::getInstance().AutomaticSendOn(false);
    setVel.angularVelocity = wheelVelocities[0];
    joints[0].setData(setVel, NON_BLOCKING);
    setVel.angularVelocity = wheelVelocities[1];
    joints[1].setData(setVel, NON_BLOCKING);
    setVel.angularVelocity = wheelVelocities[2];
    joints[2].setData(setVel, NON_BLOCKING);
    setVel.angularVelocity = wheelVelocities[3];
    joints[3].setData(setVel, NON_BLOCKING);
    EthercatMaster::getInstance().AutomaticSendOn(true);
!!!588273.cpp!!!	setJointData(in JointData : std::vector<JointAngleSetpoint>) : void
    if (JointData.size() != BASEJOINTS)
      throw std::out_of_range("Wrong number of JointAngleSetpoints");

    EthercatMaster::getInstance().AutomaticSendOn(false);
    joints[0].setData(JointData[0], NON_BLOCKING);
    joints[1].setData(JointData[1], NON_BLOCKING);
    joints[2].setData(JointData[2], NON_BLOCKING);
    joints[3].setData(JointData[3], NON_BLOCKING);
    EthercatMaster::getInstance().AutomaticSendOn(true);

!!!588785.cpp!!!	getJointData(out data : std::vector<JointSensedAngle>) : void
    data.resize(BASEJOINTS);
    EthercatMaster::getInstance().AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    EthercatMaster::getInstance().AutomaticReceiveOn(true);
!!!588401.cpp!!!	setJointData(in JointData : std::vector<JointVelocitySetpoint>) : void
    if (JointData.size() != BASEJOINTS)
      throw std::out_of_range("Wrong number of JointVelocitySetpoints");

    EthercatMaster::getInstance().AutomaticSendOn(false);
    joints[0].setData(JointData[0], NON_BLOCKING);
    joints[1].setData(JointData[1], NON_BLOCKING);
    joints[2].setData(JointData[2], NON_BLOCKING);
    joints[3].setData(JointData[3], NON_BLOCKING);
    EthercatMaster::getInstance().AutomaticSendOn(true);
!!!588913.cpp!!!	getJointData(out data : std::vector<JointSensedVelocity>) : void
    data.resize(BASEJOINTS);
    EthercatMaster::getInstance().AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    EthercatMaster::getInstance().AutomaticReceiveOn(true);
!!!589041.cpp!!!	getJointData(out data : std::vector<JointSensedTemperature>) : void
    data.resize(BASEJOINTS);
    EthercatMaster::getInstance().AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    EthercatMaster::getInstance().AutomaticReceiveOn(true);
!!!589169.cpp!!!	getJointData(out data : std::vector<JointSensedCurrent>) : void
    data.resize(BASEJOINTS);
    EthercatMaster::getInstance().AutomaticReceiveOn(false);
    joints[0].getData(data[0]);
    joints[1].getData(data[1]);
    joints[2].getData(data[2]);
    joints[3].getData(data[3]);
    EthercatMaster::getInstance().AutomaticReceiveOn(true);
!!!682353.cpp!!!	areSame(in A : double, in B : double) : bool
    return std::fabs(A - B) < 0.0001;
!!!287985.cpp!!!	initializeJoints() : void

    LOG(info) << "Initializing Joints";

    //get number of slaves
    unsigned int noSlaves = EthercatMaster::getInstance(this->ethercatConfigFileName, this->configFilePath).getNumberOfSlaves();

    if (noSlaves < BASEJOINTS) {
      throw std::out_of_range("Not enough ethercat slaves were found to create a YouBotBase!");
    }

    //read Joint Topology from config file
    //  configfile.setSection("JointTopology");

    //check if enough slave exist to create YouBotJoint for the slave numbers from config file
    //if enough slave exist create YouBotJoint and store it in the joints vector
    unsigned int slaveNumber = 0;
    configfile->readInto(slaveNumber, "JointTopology", "BaseLeftFront");
    if (slaveNumber <= noSlaves) {
      joints.push_back(YouBotJoint(slaveNumber));
    } else {
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber, "JointTopology", "BaseRightFront");
    if (slaveNumber <= noSlaves) {
      joints.push_back(YouBotJoint(slaveNumber));
    } else {
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber, "JointTopology", "BaseLeftBack");
    if (slaveNumber <= noSlaves) {
      joints.push_back(YouBotJoint(slaveNumber));
    } else {
      throw std::out_of_range("The ethercat slave number is not available!");
    }

    configfile->readInto(slaveNumber, "JointTopology", "BaseRightBack");
    if (slaveNumber <= noSlaves) {
      joints.push_back(YouBotJoint(slaveNumber));
    } else {
      throw std::out_of_range("The ethercat slave number is not available!");
    }


    //Configure Joint Parameters
    std::string jointName;
    JointName jName;
    GearRatio gearRatio;
    EncoderTicksPerRound ticksPerRound;
    InverseMovementDirection inverseDir;
    MotorContollerGearRatio contollerGearRatio;
    contollerGearRatio.setParameter(1);
    FirmwareVersion firmwareTypeVersion;

    double gearRatio_numerator = 0;
    double gearRatio_denominator = 1;

    for (unsigned int i = 0; i < BASEJOINTS; i++) {
      std::stringstream jointNameStream;
      jointNameStream << "Joint_" << i + 1;
      jointName = jointNameStream.str();
      //  configfile.setSection(jointName.c_str());

      joints[i].getConfigurationParameter(firmwareTypeVersion);
      std::string version;
      int controllerType;
      double firmwareVersion;
      firmwareTypeVersion.getParameter(controllerType, firmwareVersion);
      
      string name;
      configfile->readInto(name, jointName, "JointName");
      jName.setParameter(name);

      LOG(info) << jointName << " " << name << ": Controller Type: " << controllerType << " Firmware version: " << firmwareVersion;
      
      if(this->controllerType != controllerType){
        std::stringstream ss;
        ss << "The youBot base motor controller have to be of type: "<< this->controllerType;
        throw std::runtime_error(ss.str().c_str());
      }
      
      if(!areSame(firmwareVersion,this->minFirmwareVersion)){
        if(firmwareVersion < this->minFirmwareVersion){
          std::stringstream ss;
          ss << "The motor controller firmware version have be "<< this->minFirmwareVersion <<" or higher.";
          throw std::runtime_error(ss.str().c_str());
        }
      }


      configfile->readInto(gearRatio_numerator, jointName, "GearRatio_numerator");
      configfile->readInto(gearRatio_denominator, jointName, "GearRatio_denominator");
      gearRatio.setParameter(gearRatio_numerator / gearRatio_denominator);
      int ticks;
      configfile->readInto(ticks, jointName, "EncoderTicksPerRound");
      ticksPerRound.setParameter(ticks);
      bool invdir = false;
      configfile->readInto(invdir, jointName, "InverseMovementDirection");
      inverseDir.setParameter(invdir);

      joints[i].setConfigurationParameter(jName);
      joints[i].setConfigurationParameter(gearRatio);
      joints[i].setConfigurationParameter(ticksPerRound);
      joints[i].setConfigurationParameter(inverseDir);

      //check if the motor contoller gear ratio is one.
      //The gear ratio will be taken in to acount by the driver
      joints[i].getConfigurationParameter(contollerGearRatio);
      unsigned int cGearRatio;
      contollerGearRatio.getParameter(cGearRatio);
      if(cGearRatio != 1){
        throw std::runtime_error("The Motor Contoller Gear Ratio of " + jointName + " is not set to 1.");
      }
    }

    return;
!!!318961.cpp!!!	initializeKinematic() : void
    FourSwedishWheelOmniBaseKinematicConfiguration kinematicConfig;

    //read the kinematics parameter from a config file
    configfile->readInto(kinematicConfig.rotationRatio, "YouBotKinematic", "RotationRatio");
    configfile->readInto(kinematicConfig.slideRatio, "YouBotKinematic", "SlideRatio");
    double dummy = 0;
    configfile->readInto(dummy, "YouBotKinematic", "LengthBetweenFrontAndRearWheels_[meter]");
    kinematicConfig.lengthBetweenFrontAndRearWheels = dummy * meter;
    configfile->readInto(dummy, "YouBotKinematic", "LengthBetweenFrontWheels_[meter]");
    kinematicConfig.lengthBetweenFrontWheels = dummy * meter;
    configfile->readInto(dummy, "YouBotKinematic", "WheelRadius_[meter]");
    kinematicConfig.wheelRadius = dummy * meter;


    youBotBaseKinematic.setConfiguration(kinematicConfig);
